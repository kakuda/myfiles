これは python-mac-jp.info、python-mac-jp.texi より makeinfo バージョン
4.8 によって作成されました。

19th September, 2006


File: python-mac-jp.info,  Node: Top,  Next: 序,  Prev: (dir),  Up: (dir)

Macintoshモジュールリファレンス
*******************************

* Menu:

* 序::
* MacintoshでPythonを利用する::
* MacPython モジュール::
* MacPython OSA モジュール::
* MacOS ツールボックスモジュール::
* 文書化されていないモジュール::
* 歴史とライセンス::
* 日本語訳について::
* Module Index::
* Class-Exception-Object Index::
* Function-Method-Variable Index::
* Miscellaneous Index::


File: python-mac-jp.info,  Node: 序,  Next: MacintoshでPythonを利用する,  Prev: Top,  Up: Top

序
**

Copyright (C) 2001-2006 Python Software Foundation.  All rights
reserved.

Copyright (C) 2000 BeOpen.com.  All rights reserved.

Copyright (C) 1995-2000 Corporation for National Research Initiatives.
All rights reserved.

Copyright (C) 1991-1995 Stichting Mathematisch Centrum.  All rights
reserved.

Translation Copyright (C) 2003, 2004 Python Document Japanese
Translation Project. All rights reserved.

ライセンスおよび許諾に関する完全な情報は、このドキュメントの末尾を
参照してください。

     このライブラリリファレンスマニュアルでは、Macintosh用のPython拡張に関
     して詳しく記述します。
     も同時に参照しながら利用するようにしてください。標準ライブラリと組み込み型はそちら
     に詳しく書かれています。

     このマニュアルを読むにあたっては、Python言語の基礎知識を持っていること
     が必要です。Pythonの肩のこらない入門編が必要なら、
     を読んでください。 は、構文や意味論に
     関する疑問を解決するため、それなりに分かった人が読むべきものです。最
     後にひとつ。インタプリタの拡張と組み込み

     という名のマニュアルでは、Pythonへ新たに拡張機能を追加す
     る方法と、他のアプリケーションに組み込む方法について述べています。



File: python-mac-jp.info,  Node: MacintoshでPythonを利用する,  Next: MacPython モジュール,  Prev: 序,  Up: Top

1 MacintoshでPythonを利用する
*****************************

Python を Mac OS X が稼動する Macintosh 上で動作させる方法は、原則的にそ
の他の UNIXプラットフォームと同じです。ただ、IDEやパッケージマネージャ
などの追加機能については一言説明しておく価値があるでしょう。

Mac OS 9 以前のバージョン上での Python は、UNIX や Windows 上の Python
とはかなり異なります。しかしこのマニュアルでは取り扱いません。と
いうのも、Python 2.4 以降ではこのプラットフォームがサポート対象外となっ
ているからです。Mac OS 9 用の最新の 2.3 系リリースのインストーラやドキュ
メントが `http://www.cwi.nl/~jack/macpython' にあります。

* Menu:

* MacPythonの入手とインストール::
* 統合開発環境::
* パッケージマネージャ::


File: python-mac-jp.info,  Node: MacPythonの入手とインストール,  Next: 統合開発環境,  Prev: MacintoshでPythonを利用する,  Up: MacintoshでPythonを利用する

1.1 MacPythonの入手とインストール
=================================

Mac OS X 10.3 には、Apple によってPython 2.3
が既にインストールされています。
しかし、ここにはIDEやその他の追加機能が含まれていません。それらが必要な
場合は、MacPythonのウェブサイト `http://www.cwi.nl/~jack/macpython'
から `MacPython for Panther additions' をインストールしなければ
なりません。

インストールを行うと、様々なものが入ります:

   * `Applications' フォルダ下の `MacPython-2.3' フォルダ。
     このフォルダの中には、 PythonIDE 統合開発環境、ファインダから
     ダブルクリックして Python スクリプトを起動するための
     PythonLauncher、 Package Manager が入っています。

   * ほぼ標準の UNIX 版のコマンドライン Python インタプリタ。
     `/usr/local/bin/python' にインストールされます。ただし、
     通常作成される`/usr/local/lib/python' はできません。

   * フレームワーク `/Library/Frameworks/Python.framework' 。
     実際の処理にかかわる部分ですが、たいていの場合それを気にする必要は
     ありません。

単に上の 3 つを削除すれば、MacPython をアンインストールできます。

"additions" のインストーラで既存の Apple-Python に上書きインストールを
した場合、フレームワークやコマンドラインインタプリタは見えないでしょう。
というのもこれらはAppleが事前にインストール済みだからです。それぞれ
`/System/Library/Frameworks/Python.framework' と `/usr/bin/python'
にインストールされています。原則として、これらを
変更したり削除したりしてはいけません。というのもこれらはAppleの管理下に
あるものであり、Appleやサードパーティのソフトウェアがそれを利用している
可能性があるからです。

PythonIDE には "MacPython Help" という名前の Apple Help Viewer ブックが
入っています。このヘルプはヘルプメニューからアクセスできます。
まったくの Python の初心者は、このドキュメントの IDE の説明から
読み始めるとよいでしょう。

他の UNIX プラットフォーム上で動作する Python について詳しいなら、 UNIX
シェルからの Python スクリプトの実行を説明している節を読むのが
よいでしょう。

* Menu:

* Python スクリプトの実行方法::
* GUI つきのスクリプトの実行::
* 設定::


File: python-mac-jp.info,  Node: Python スクリプトの実行方法,  Next: GUI つきのスクリプトの実行,  Prev: MacPythonの入手とインストール,  Up: MacPythonの入手とインストール

1.1.1 Python スクリプトの実行方法
---------------------------------

Mac OS X 上で Python を始めるには PythonIDE 統合開発環境に触れてみるの
が最良の方法です。章 *Note Python Interactiveウィンドウを使う::
を見るか、IDE が起動しているならヘルプ メニューから呼び出せる Apple
ヘルプビューア書類の IDE 入門を読みながら IDE に触れてみてください。

Python を Terminal ウィンドウのコマンドラインや Finder から起動したい
なら、まずはスクリプトを書くエディタが必要になります。 Mac OS X
には、`vim' や `emacs' のような、様々な標準の UNIX
コマンドラインエディタがついてきます。もっと Mac らしいエディタ
を使いたければ、 Bare Bones Software
(`http://www.barebones.com/products/bbedit/index.shtml') の `BBEdit' か
`TextWrangler' を選ぶと良いでしょう。 `AppleWorks' や、ASCII
形式でファイルを保存できるその他のワード プロセッサ、あるいは OS X
に同梱されている `TextEdit' でもかまい ません。

Terminal のウィンドウから自作のスクリプトを起動するには、シェルの検索
パスに `/usr/local/bin' 含まれるようにしておかなければなりません。

Finder から自作スクリプトを実行するには、2 つのやり方があります:
   * プログラムを `PythonLauncher' にドラッグします。

   * Finder の情報ウィンドウで、作成したスクリプト (又はその他の `.py'
     スクリプト) を開くためのデフォルトのアプリケーション として
     `PythonLauncher' を選択して、スクリプトを ダブルクリックします。

PythonLauncher には様々な設定があり、スクリプトの起動方法を制御できる
ようになっています。オプションキーを押しながらドラッグすると、起動時に
設定を変更できます。全体的な設定を変えたければ Perferences メニューを
使ってください。


File: python-mac-jp.info,  Node: GUI つきのスクリプトの実行,  Next: 設定,  Prev: Python スクリプトの実行方法,  Up: MacPythonの入手とインストール

1.1.2 GUI つきのスクリプトの実行
--------------------------------

Mac OS X には、一つだけ知っておかねばならないクセがあります: Aqua
ウィンドウマネージャとやり取りするような (すなわち、何らかの GUI
を持つような) プログラムは、特殊な方法で起動せねばならないのです。
GUIを持ったスクリプトを実行するには `python' の代わりに `pythonw'
を使ってください。


File: python-mac-jp.info,  Node: 設定,  Prev: GUI つきのスクリプトの実行,  Up: MacPythonの入手とインストール

1.1.3 設定
----------

MacPython では、標準的な UNIX の Python が使う`PYTHONPATH'
のような環境変数全てに従います。しかし、Finder から起動したプログラム
では、こうした変数に対して標準的でない振る舞いを見せます。これは、
Finder が起動時に `.profile' や `.cshrc' を読まないためです。 Finder
から起動するプログラム向けに環境変数を設定したければ、
`~/.MacOSX/environment.plist' ファイルを作成して ください。詳しくは
Apple Technical Document QA1067 を参照してください。

Package Manager を使うと、追加の Python パッケージをとても簡単に
インストールできます。詳しくは MacPython ヘルプを参照してください。


File: python-mac-jp.info,  Node: 統合開発環境,  Next: パッケージマネージャ,  Prev: MacPythonの入手とインストール,  Up: MacintoshでPythonを利用する

1.2 統合開発環境
================

`Python IDE'(統合開発環境) は独立したアプリケーションで、Python
コードのテキストエディタや、クラスブラウザ、グラフィカルデバッガなどとし
て動作します。

Python のオンラインヘルプには IDE の簡単な使い方が含まれています。これを
見れば主要な機能やその使用法がわかることでしょう。

* Menu:

* Python Interactiveウィンドウを使う::
* Pythonスクリプトを書く::
* 統合開発環境の中からスクリプトを実行する::
* Save as と Save as Applet の違い::


File: python-mac-jp.info,  Node: Python Interactiveウィンドウを使う,  Next: Pythonスクリプトを書く,  Prev: 統合開発環境,  Up: 統合開発環境

1.2.1 "Python Interactive"ウィンドウを使う
------------------------------------------

このウィンドウは、通常の UNIX のコマンドラインインタプリタと同じよう
に使います。


File: python-mac-jp.info,  Node: Pythonスクリプトを書く,  Next: 統合開発環境の中からスクリプトを実行する,  Prev: Python Interactiveウィンドウを使う,  Up: 統合開発環境

1.2.2 Pythonスクリプトを書く
----------------------------

`Python IDE' は、対話的に使うだけでなく、Python プログラムを書
き上げたり、順次保存したりでき、全体や一部分の実行もできます。

「File」メニューの適当なメニューアイテムを選択すれば
新たにスクリプトを作成したり、前に保存したスクリプトを開いたり、
現在開いているスクリプトを保存したりできます。 Python スクリプトを
`Python IDE' の上にドロップすると、ファイルを編集用に開きます。

`Python IDE' はスクリプトを保存する際にクリエータコードの設定を
使います。この設定は、ドキュメントウィンドウの一番右上の小さな黒い
三角形をクリックし、「save options」を選べば操作できます。
デフォルトでは、ファイルの`Python IDE' をクリエータコードに
して保存します。従って、ファイルのアイコンをダブルクリックすると
ファイルを編集用に開きます。この動作を変更して、 `PythonLauncher'
で開いて実行するようしたいと思う場合も
あるでしょう。そうするには、単に「save options」から
「PythonLauncher」を選ぶだけです。このオプションは
アプリケーションではなく_ファイル_ に関連付けられているので注意
してください。


File: python-mac-jp.info,  Node: 統合開発環境の中からスクリプトを実行する,  Next: Save as と Save as Applet の違い,  Prev: Pythonスクリプトを書く,  Up: 統合開発環境

1.2.3 統合開発環境の中からスクリプトを実行する
----------------------------------------------

`Python IDE'の最前面のウィンドウで全部実行(run all)ボタンを押
すと、そのウィンドウのスクリプトを実行できます。しかし、仮に Python の
習慣通りに `if __name__ == "__main__":' と書いても、スクリプトは
デフォルトでは「__main__」に _ならない_ ことに注意しておきましょう。
そういう風に動作させるには、ドキュメントウィンドウの一番右上の小さ
な黒い三角形から、"Run as __main__"オプションを選ばねばなりません。
このオプションはアプリケーションではなく_ファイル_ に関連付けられて
いるので注意してください。とはいえ、このオプションは保存後もそのまま
_残ります_。止めたければ、再度このオプションを選んでください。


File: python-mac-jp.info,  Node: Save as と Save as Applet の違い,  Prev: 統合開発環境の中からスクリプトを実行する,  Up: 統合開発環境

1.2.4 "Save as" と "Save as Applet" の違い
------------------------------------------

Python スクリプトを書いたら、ファイルを 「アプレット」としても保存
できます ("File"メニューの"Save as applet"を選びます) 。
アプレットとして保存すると、ファイルやフォルダをスクリプトにドロップ
することで、コマンドライン引数で渡すのと同じようにスクリプトにファイル
やフォルダを渡せるという、大きな利点があります。
ただし、アプレットを今までのファイルに上書きせず、別のファイルとして
保存するように気をつけてください。アプレットとして保存したファイルは
二度と編集できないからです。

「ドラッグ＆ドロップ」でアプレットに渡した項目にアクセスするには、
標準的な `sys.argv' の動作を使います。詳しくは
Pythonの標準ドキュメントを参照してください。

スクリプトをアプレットとして保存しても、 Python がインストールされてい
ないシステムでは実行できないので注意してください。


File: python-mac-jp.info,  Node: パッケージマネージャ,  Prev: 統合開発環境,  Up: MacintoshでPythonを利用する

1.3 パッケージマネージャ
========================

歴史的に、MacPython には便利な拡張パッケージが多数同梱されてきました。と
いうのも、対打数の Macintosh ユーザは開発環境や C コンパイラを持っていな
かったからです。Mac OS X 用のものについては、拡張パッケージは同梱されて
いません。しかし、新たな仕組みによって拡張パッケージに簡単にアクセスでき
るようになりました。

Python パッケージマネージャを使用すると、追加パッケージをインストールし
て Python の機能を強化できるようになります。パッケージマネージャは、
MacOS のバージョンと Python のバージョンを調べ、それと同じ組み合わせでテ
ストしたパッケージのデータベースをダウンロードします。つまり、パッケージ
マネージャに表示されているのにもかかわらず動作しないパッケージが万一あっ
た場合は、気兼ねなくデータベースの管理者に文句を言っていいということです。

次に、パッケージマネージャはどのパッケージがインストールされていてどのパ
ッケージがインストールされていないのかを調べます。パッケージマネージャを
使わずにインストールしたパッケージも検出します。パッケージを選択してイン
ストールすると、もし別のパッケージが必要な場合も自動的にそれをインストー
ルします。

パッケージマネージャは、ひとつのパッケージをバイナリとソースの二通りで表
示することがあります。バイナリ版は常に使用できますが、ソース版を使うには
Apple Developer Tools をインストールしておく必要があります。このツールや
その他の依存ファイルがインストールされていない場合は、パッケージマネージ
ャは警告を発します。

パッケージマネージャは、単体のアプリケーションとして使用する以外にもIDE
の機能として使うこともできます。この場合はメニューから File->Package
Manager を選択します。


File: python-mac-jp.info,  Node: MacPython モジュール,  Next: MacPython OSA モジュール,  Prev: MacintoshでPythonを利用する,  Up: Top

2 MacPython モジュール
**********************

このドキュメントで記述されている次のモジュールは、いずれもMacintoshで
のみ利用可能です。

* Menu:

* macpath::
* macfs::
* ic::
* MacOS::
* macostools::
* findertools::
* EasyDialogs::
* FrameWork::
* autoGIL::


File: python-mac-jp.info,  Node: macpath,  Next: macfs,  Prev: MacPython モジュール,  Up: MacPython モジュール

2.1 MacOS のパス操作関数
========================

MacOS のパス操作関数

このモジュールは `os.path' モジュールの Macintosh 9 (およびそれ以前)
用の実装です。これを使用すると、古い形式の Macintosh のパス名を Mac OS X
(あるいはその他の任意のプラットフォーム) 上で扱うことができます。
`os.path' のドキュメントに関しては、 を参照してくだ さい。

次の関数がこのモジュールで利用できます。 `normcase()'、 `normpath()'、
`isabs()'、 `join()'、 `split()'、 `isdir()'、 `isfile()'、 `walk()'、
`exists()'。 `os.path'
で利用できる他の関数については、ダミーの関数として相
当する物が利用できます。


File: python-mac-jp.info,  Node: macfs,  Next: ic,  Prev: macpath,  Up: MacPython モジュール

2.2 様々なファイルシステム関連のサービス
========================================

FSSpec、エイリアスマネージャ、`finder'エイリアス、標準ファイル
パッケージのサポート。

_This is deprecated in Python 2.3.
macfsモジュールは旧式のものです。`FSSpec'、 `FSRef'、`Alias'
の操作には、`Carbon.File' または`Carbon.Folder' モジュールを、
ファイルダイアログには`EasyDialogs'を使ってください。
また、このモジュールはUFSパーティションでは正確には動作しないことが
わかっています。_

このモジュールでは、Macintoshの`FSSpec' の操作、
エイリアスマネージャ、`finder'エイリアス、および標準ファイル
パッケージへのアクセスを提供しています。 

関数やメソッドがFILE 引数をとるようになっている場合、引数は常に 次の 3
つ、(1) Macintosh のフルパス名あるいは部分パス名、 (2) `FSSpec'
オブジェクト、 (3)  で解説されている 3 要素のタプル `(WDREFNUM, PARID,
NAME)' のうちのいずれかになります。

`FSSpec' は、実在しないファイルでも、実在するフォルダの下に
配置されていることになっている限り表現できます。 MacPython
ではパス名も同じように扱えますが、UNIXベースの Python では
パス名とFSRefsの挙動が異なるため扱えません。 詳しくは Apple
のドキュメントを参照してください。

エイリアスと標準ファイルパッケージの詳細も Apple のドキュメントに
書かれています。

`FSSpec(file)'
     指定したファイルに対する`FSSpec'オブジェクトを作成します。

`RawFSSpec(data)'
     FSSpec の C 構造体の生データが入った文字列から`FSSpec'
     オブジェクトを作成します。主に`FSSpec'構造体をネットワーク経由で得
     る場合に便利です。

`RawAlias(data)'
     Alias の C 構造体の生データが入った文字列から`Alias'
     オブジェクトを作成します。主に`Alias'構造体をネットワーク経由で得
     る場合に便利です。

`FInfo()'
     ゼロで埋めた`FInfo'オブジェクトを作成します。

`ResolveAliasFile(file)'
     エイリアスファイルを解決します
     (オリジナルのファイルとの対応を取りま す)。`(FSSPEC, ISFOLDER,
     ALIASED)' からなる 3 要素のタプルを返します。 FSSPEC
     はエイリアス解決によって得られた`FSSpec'オブジェクト です。FSSPEC
     がフォルダを指している場合、ISFOLDER は true になります。FSSPEC
     がエイリアスを指している場合、ALIASED は true になります
     (それ以外の場合には、FSSPEC はファイル自体の `FSSpec' になります)。

`StandardGetFile([type, ...])'
     標準的イアログ 「入力ファイルを開く」をユーザに提示します。
     オプションとして、ユーザが選択できるファイルを制限するために 4
     文字の文字列で表されたファイルタイプ指定子を 4 つまで渡せます。
     この関数は、`FSSpec'オブジェクトとユーザがキャンセルしないで
     ダイアログを閉じたかどうかを示すフラグを返します。

`PromptGetFile(prompt[, type, ...])'
     `StandardGetFile()' とほぼ同じですが、ダイアログの一番上に表示さ
     れるプロンプトを指定できます。

`StandardPutFile(prompt[, default])'
     標準ダイアログ 「出力ファイルを開く」をユーザに提示します。 PROMPT
     はプロンプト文字列です。DEFAULT はオプションの引数で、
     出力ファイル名の初期値を指定します。
     この関数は、`FSSpec'オブジェクトとユーザがキャンセルしないで
     ダイアログを閉じたかどうかを示すフラグを返します。

`GetDirectory([prompt])'
     非標準的ダイアログ「ディレクトリを選ぶ」をユーザに提示します。
     このダイアログでは、選択したいディレクトリを開いておいてから、
     "select  current directory" ボタンをクリックします。 PROMPT
     はプロンプト文字列で、ダイアログの一番上に表示されます。
     この関数は、`FSSpec'オブジェクトとユーザがキャンセルしないで
     ダイアログを閉じたかどうかを示すフラグを返します。

`SetFolder([fsspec])'
     ファイル選択ダイアログを提示する時に最初に表示されるフォルダを設定します。
     FSSPEC には、フォルダそのものではなく、フォルダ内のファイル
     を指定します (実在しないファイルでもかまいません)。
     引数を渡さない場合は、フォルダはカレントディレクトリ、つまり
     `os.getcwd()'で返されるディレクトリに設定されます。

     System 7.5 以降では、ユーザは「一般設定」コントロールパネルで標準
     ファイルパッケージの振る舞いを変更でき、設定によってはこの関数の
     呼び出しが無効化されるので注意してください。

`FindFolder(where, which, create)'
     ゴミ箱や初期設定フォルダなど、Mac OS
     が管理している「特別な」フォルダの 位置を検索します。WHERE
     は検索したいディスク、WHICH は
     検索したいフォルダを指定する4文字の文字列です。CREATE を設定す
     ると、該当するフォルダが存在しない場合に新たに生成します。
     `(VREFNUM, DIRID)' からなるタプルを返します。

     WHERE とWHICH に指定できる定数は、標準モジュール
     CARBON.FOLDERSにあります。

`NewAliasMinimalFromFullPath(pathname)'
     与えられたファイルを指す最小限の`alias'オブジェクトを返します。
     ファイルはフルパス名で与えなければなりません。これは存在しないファイ
     ルを指す`Alias'を作成する唯一の方法です。

`FindApplication(creator)'
     4 文字のクリエータコードCREATOR を持ったアプリケーションの位置を
     探し出します。この関数はアプリケーションを指す`FSSpec'オブジェ
     クトを返します。

* Menu:

* FSSpec オブジェクト::
* エイリアスオブジェクト::
* FInfo オブジェクト::


File: python-mac-jp.info,  Node: FSSpec オブジェクト,  Next: エイリアスオブジェクト,  Prev: macfs,  Up: macfs

2.2.1 FSSpec オブジェクト
-------------------------

`data'
     FSSpecオブジェクトの生データです。
     他のアプリケーションに渡すといった場合に適した形式です。

`as_pathname()'
     `FSSpec' オブジェクトの表すファイルのフルパス名を返します。

`as_tuple()'
     `FSSpec'オブジェクトで記述されたファイルの情報を、 `(WDREFNUM,
     PARID, NAME)' のタプルで返します。

`NewAlias([file])'
     このFSSpecで記述されたファイルのエイリアスオブジェクトを作成します。
     省略可能なFILEパラメータを渡すと、エイリアスはそのファイルに対
     する相対指定で作成され、その他の場合は絶対指定となります。

`NewAliasMinimal()'
     このファイルを指す最小限のエイリアス情報を作成します。

`GetCreatorType()'
     このファイルの4文字のクリエータとタイプを返します。

`SetCreatorType(creator, type)'
     このファイルに4文字のクリエータとタイプを設定します。

`GetFInfo()'
     ファイルのファインダ情報を示す`FInfo' オブジェクトを返します。

`SetFInfo(finfo)'
     ファイルのファインダ情報をFINFO(`FInfo' オブジェクト)
     で与えた値に設定します。

`GetDates()'
     作成日、修正日、バックアップ日を意味する3つの浮動小数点数からなるタプル
     を返します。

`SetDates(crdate, moddate, backupdate)'
     ファイルの作成日、修正日、バックアップ日を設定します。 各々の値は
     Python が時刻の表現に使っている標準の浮動小数点型です。


File: python-mac-jp.info,  Node: エイリアスオブジェクト,  Next: FInfo オブジェクト,  Prev: FSSpec オブジェクト,  Up: macfs

2.2.2 エイリアスオブジェクト
----------------------------

`data'
     エイリアス (Alias) レコードの生データです。
     リソースへの書き込みや他のプログラムへの転送に適した形式です。

`Resolve([file])'
     エイリアスを解決します。エイリアスが相対エイリアスとして作成され
     ている場合は、どこからの相対かを示すファイルを渡さねばなりません。
     エイリアスが指し示すファイルの FSSpec と、`Alias' オブジェクト
     自体が検索処理中に変更されたかどうかを示すフラグを返します。
     ファイルは実在しないが、ファイルまでのパスは実在する場合、 有効な
     FSSpec を返します。

`GetInfo(num)'
     Cのルーチン`GetAliasInfo()'へのインタフェースです。

`Update(file[, file2])'
     エイリアスを、FILE に指定したファイルを指すように更新します。
     FILE2 を指定していれば、相対エイリアスを作成します。

今のところ、リソースは`Alias' オブジェクトとして直接操作できません。
そのため、`Update()'を呼んだ後か、`Resolve()'でエイリアスに
変更があったと分かった後は、Pythonプログラム側で`Alias'
オブジェクトから`data'の値を取りだし、リソースを修正しておく
責任があります。


File: python-mac-jp.info,  Node: FInfo オブジェクト,  Prev: エイリアスオブジェクト,  Up: macfs

2.2.3 FInfo オブジェクト
------------------------

各フィールドの詳しい説明は を参照してください。

`Creator'
     ファイルの4文字のクリエータコードです。

`Type'
     ファイルの4文字のタイプコードです。

`Flags'
     ファイルのファインダフラグで、 16ビットの整数で表現されています。
     FLAGSのビット値は、標準モジュール`MACFS'で定義されてい ます。

`Location'
     フォルダ内でファイルのアイコンが配置されている場所を示す Point
     値です。

`Fldr'
     ファイルが入っているフォルダ (を整数で表したもの) です。


File: python-mac-jp.info,  Node: ic,  Next: MacOS,  Prev: macfs,  Up: MacPython モジュール

2.3 インターネット設定へのアクセス
==================================

インターネット設定へのアクセス。

このモジュールでは、`システム設定' や `Finder'
で設定したインターネット関連の設定へのアクセス機能を提供しています。

このモジュールには、`icglue'  という
低水準の関連モジュールがあり、インターネット設定への基本的なアクセス
機能を提供しています。
この低水準のモジュールはドキュメント化されていませんが、各ルーチンの
docstring にはパラメタの説明があり、ルーチン名には Internet Config に
対する Pascal や C のインタフェースと同じ名前を使っているので、
このモジュールが必要な場合には標準の IC プログラマドキュメントを利用
できます。

`ic'モジュールでは、例外`error'と、インターネット設定
から生じる全てのエラーコードに対するシンボル名を定義しています。詳しくは
ソースコードを参照してください。

`error'
     `ic'モジュール内部でエラーが生じたときに送出される例外です。

`ic'モジュールは以下のクラスと関数を定義しています：

`IC([signature[, ic]])'
     インターネット設定オブジェクトを作成します。SIGNATUREは、 IC
     の設定に影響を及ぼす可能性のある現在のアプリケーションを表す
     4文字のクリエータコード (デフォルトは`'Pyth'') です。
     オプションの引数IC は低水準モジュールであらかじめ作成しておいた
     `icglue.icinstance'で、別の設定ファイルなどから設定を得る場合に
     便利です。

`launchurl(url[, hint])'

`parseurl data[, start[, end[, hint]]]'

`mapfile file'

`maptypecreator type, creator[, filename]'

`settypecreator file'
     これらの関数は、後述する同名のメソッドへの「ショートカット」です。

* Menu:

* IC オブジェクト::


File: python-mac-jp.info,  Node: IC オブジェクト,  Prev: ic,  Up: ic

2.3.1 IC オブジェクト
---------------------

`IC'オブジェクトはマップ型のインターフェースを持っているので、
メールアドレスの取得は単に`IC['MailAddress']' でできます。
値の代入もでき、設定ファイルのオプションを変更できます。

このモジュールは各種のデータ型を知っていて、IC内部の表現を「論理的な」
Python データ構造に変換します。`ic' モジュールを単体で実行すると、
テストプログラムが実行されて ICデータベースにある全てのキーと値のペアを
リスト表示するので、文書代わりになります。

モジュールがデータの表現方法を推測できなかった場合、`data'
属性に生のデータが入った`ICOpaqueData' 型のインスタンスを返します。
この型のオブジェクトも代入に利用できます。

`IC'には辞書型のインターフェースの他にも以下のようなメソッドが
あります。

`launchurl(url[, hint])'
     与えられたURLを解析し、適切なアプリケーションを起動してURLを渡します。省
     略可能なHINTは、`'mailto:''などのスキーム名で、不完全なURLはこ
     のスキームにあわせて補完します。HINT を指定していない場合、
     不完全なURLは無効になります。

`parseurl(data[, start[, end[, hint]]])'
     DATA の中からURLを検索し、URLの開始位置、終了位置、URLそのものを
     返します。オプションの引数STARTとEND を使うと検索範囲を制限
     できます。例えば、ユーザーが長いテキストフィールドをクリックした場合に、
     このルーチンにテキストフィールド全体とクリック位置START
     を渡すことで、 ユーザーがクリックした場所にある URL
     全体を返させられます。
     先に述べたように、HINTはオプションで、不完全なURLを補完するための
     スキームです。

`mapfile(file)'
     FILE に対するマッピングエントリを返します。FILE には
     ファイル名か`FSSpec()' の戻り値を渡せます。実在
     しないファイルであってもかまいません。

     マッピングエントリは`(VERSION, TYPE, CREATOR, POSTCREATOR, FLAGS,
     EXTENSION, APPNAME, POSTAPPNAME, MIMETYPE, ENTRYNAME)'
     からなるタプルで返されます。VERSION はエントリーのバージョン番号、
     TYPE は4文字のファイルタイプ、CREATOR は 4 文字の
     クリエータタイプ、POSTCREATOR はファイルのダウンロード後に
     オプションとして起動され、後処理を行うアプリケーションの 4 文字
     のクリエータコードです。FLAGS は、転送をバイナリで行うかアスキー
     で行うか、などの様々なフラグビットからなる値です。
     EXTENSIONはこのファイルタイプに対するファイル名の拡張子、
     APPNAMEはファイルが属するアプリケーションの印字可能な名前、
     POSTAPPNAMEは後処理用アプリケーション、
     MIMETYPEはこのファイルのMIMEタイプ、最後のENTRYNAMEは
     このエントリの名前です。

`maptypecreator(type, creator[, filename])'
     4文字のTYPEとCREATOR コードを持つファイルに対するマッピン
     グエントリを返します。(クリエータが `'????'' であるような場合に)
     正しいエントリが見つかりやすいようにオプションのFILENAME を指定
     できます。

     マッピングエントリーはMAPFILEと同じフォーマットで返されます。

`settypecreator(file)'
     実在のファイルFILE に対して、拡張子に基づいて適切なクリエータと
     タイプを設定します。FILE の指定は、ファイル名でも `FSSpec()'
     の戻り値でもかまいません。変更は Finder に 通知されるので、Finder
     上のアイコンは即座に更新されます。


File: python-mac-jp.info,  Node: MacOS,  Next: macostools,  Prev: ic,  Up: MacPython モジュール

2.4 Mac OS インタプリタ機能へのアクセス
=======================================

Mac OS 固有のインタープリタ機能へのアクセス。

このモジュールは、Python インタプリタ内の MacOS 固有の機能に対するアク
セスを提供します。例えば、インタプリタのイベントループ関数などです。十
分注意して利用してください。

モジュール名が大文字で始まることに注意してください。これは昔からの約束
です。

`runtimemodel'
     Python 2.4 以降は常に `'macho'' です。それより前のバージョンの
     Python では、古い Mac OS 8 ランタイムモデルの場合は `'ppc''、 Mac
     OS 9 ランタイムモデルの場合は `'carbon'' となります。

`linkmodel'
     インタープリタがどのような方法でリンクされているかを返します。拡張モ
     ジュールがリンクモデル間で非互換性かもしれない場合、パッケージはより多
     くの適切なエラーメッセージを伝えるためにこの情報を使用することができま
     す。値は静的リンクした Python は `'static''、Mac OS X framework
     で構築した Python は `'framework''、標準の UNIX 共有ライブラリ
     (shared library)で構築された Python は `'shared'' となります。
     古いバージョンの Python の場合、Mac OS 9 互換の Python では `'cfm''
     となります。

`Error'
     MacOS でエラーがあると、このモジュールの関数か、Mac
     固有なツールボック
     スインターフェースモジュールから、この例外が生成されます。引数は、整数
     エラーコード(`OSErr' 値)とテキストで記述されたエラーコードです。
     分かっている全てのエラーコードのシンボル名は、標準モジュール
     `macerrors'  で定義されています。

`GetErrorString(errno)'
     MacOSのエラーコード ERRNO のテキスト表現を返します。

`DebugStr(message [, object])'
     Mac OS X上では、文字列を単純に標準出力に送ります (古いバージョンの
     Mac
     OSでは、より複雑な機能が使用できました)。しかし、低水準のデバッガ
     (`gdb'など)
     用にブレークポイントを設定する場所も適切に用意しています。

`SysBeep()'
     ベルを鳴らします。

`GetTicks()'
     システム起動時からのチック数(clock ticks、1/60秒)を得ます。

`GetCreatorAndType(file)'
     2つの4文字の文字列としてファイルクリエータおよびファイルタイプを返しま
     す。FILE 引数はパスもしくは、`FSSpec'、`FSRef' オブジェ
     クトを与える事ができます。

`SetCreatorAndType(file, creator, type)'
     ファイルクリエータおよびファイルタイプを設定します。FILE 引数は
     パスもしくは、`FSSpec'、`FSRef' オブジェクトを与える事ができ
     ます。CREATOR と TYPE は4文字の文字列が必要です。

`openrf(name [, mode])'
     ファイルのリソースフォークを開きます。引数は組み込み関数 `open()'
     と同じです。返されたオブジェクトはファイルのように
     見えるかもしれませんが、これは Python
     のファイルオブジェクトではあり
     ませんので扱いに微妙な違いがあります。

`WMAvailable()'
     現在のプロセスが動作しているウィンドウマネージャにアクセスします。例え
     ば、Mac OS X サーバー上、あるいは SSH
     でログインしている、もしくは現在
     のインタープリタがフルブローンアプリケーションバンドル(fullblown
     application
     bundle)から起動されていない場合などのような、ウィンドウマネー
     ジャが存在しない場合は `False' を返します。


File: python-mac-jp.info,  Node: macostools,  Next: findertools,  Prev: MacOS,  Up: MacPython モジュール

2.5 ファイル操作を便利にするルーチン集
======================================

ファイル操作を便利にするルーチン集。

このモジュールには、Macintosh 上でのファイル操作を便利にするための
ルーチンがいくつか入っています。全てファイルパラメタは，パス名か
`FSRef' または`FSSpec' オブジェクトで指定できます。
このモジュールは、リソースフォークつきファイル (forked file) をサポート
するファイルシステムを想定しているので、UFSパーティションに使っては
なりません．

`macostools' モジュールでは以下の関数を定義しています。

`copy(src, dst[, createpath[, copytimes]])'
     ファイルSRCをDSTへコピーします。 CREATEPATH
     が真なら、必要に応じてDSTに至るまでのフォルダ を作成します。
     このメソッドはデータとリソースフォーク，そしていくつかのファインダ情報
     (クリエータ、タイプ、フラグ) をコピーします。オプションの COPYTYPES
     を指定すると，作成日、修正日、バックアップ日の情報のコピー
     (デフォルトでは コピーします)
     を制御できます。カスタムアイコン、コメント、アイコン位置は
     コピーされません。

`copytree(src, dst)'
     SRCからDSTへ再帰的にファイルのツリーをコピーします。
     必要に応じてフォルダを作成してゆきます．SRCとDSTはパス名で
     指定しなければなりません。

`mkalias(src, dst)'
     SRCを示すファインダエイリアスDSTを作成します。

`touched(dst)'
     ファイルDSTのクリエータやタイプなどのファインダ情報が変わったこと
     をファインダに知らせます。
     ファイルはパス名か`FSSpec'で指定できます。この呼び出しは，
     ファインダにアイコンを再描画させるよう命令します。

`BUFSIZ'
     `copy'に用いるバッファサイズで、デフォルトは 1 メガバイトです。

Apple のドキュメントでは，ファインダエイリアスの作成プロセスを規定して
いません．そのため，`mkalias()' で作成したエイリアスが互換性の
ない振る舞いをする可能性があるので注意してください。


File: python-mac-jp.info,  Node: findertools,  Next: EasyDialogs,  Prev: macostools,  Up: MacPython モジュール

2.6 `finder' のApple Eventsインターフェース
===========================================

`finder'のApple Eventsインターフェースのラッパ。

このモジュールのルーチンを使うと、Pythonプログラムからファインダが持つい
くつかの機能へアクセスできます。 これらの機能はファインダへのAppleEvent インターフェー
スのラッパとして実装されています。
全てのファイルとフォルダのパラメータは、フルパス名、あるいは
`FSRef'か`FSSpec'オブジェクトで指定できます。

`findertools'モジュールは以下の関数を定義しています。

`launch(file)'
     ファインダにFILEを起動するように命令します。
     起動が意味するものはFILEに依存します。アプリケーションなら起動しま
     すし、フォルダなら開かれ、文書なら適切なアプリケーションで開かれます。

`Print(file)'
     ファインダにファイルを印刷するよう命令します。
     実際の動作はファイルを選択し、ファインダのファイルメニューから印刷コマン
     ドを使うのと同じです。

`copy(file, destdir)'
     ファインダにファイルかフォルダであるFILEをフォルダDESTDIRに
     コピーするよう命令します。
     この関数は新しいファイルを示す`Alias'オブジェクトを返します。

`move(file, destdir)'
     ファインダにファイルかフォルダであるFILEをフォルダDESTDIRに
     移動するように命令します。
     この関数は新しいファイルを示す`Alias'オブジェクトを返します。

`sleep()'
     マシンがサポートしていれば、ファインダにMacintoshをスリープさせるよう命
     令します。

`restart()'
     ファインダに、マシンを適切に再起動するよう命令します。

`shutdown()'
     ファインダに、マシンを適切にシャットダウンするよう命令します。


File: python-mac-jp.info,  Node: EasyDialogs,  Next: FrameWork,  Prev: findertools,  Up: MacPython モジュール

2.7 基本的な Macintosh ダイアログ
=================================

基本的な Macintosh ダイアログ。

`EasyDialogs'モジュールには、 Macintosh で単純なダイアログ操作
を行うためのルーチンが入っています。
全てのルーチンは、オプションとしてリソース ID パラメタIDをとり
ます。デフォルトの`DLOG' のリソース (タイプとアイテムナンバの 両方)
が一致するようなダイアログがあれば、ID を使ってダイアログ
操作に使われるダイアログオブジェクト情報を上書きできます。詳細は
ソースコードを参照してください。

`EasyDialogs' モジュールでは以下の関数を定義しています。

`Message(str[, id[, ok]])'
     メッセージテキストSTR付きのモーダルダイアログを表示します。テキス
     トの長さは最大255文字です。
     ボタンのテキストはデフォルトでは"OK"ですが、文字列の引数OK を
     指定して変更できます。
     ユーザが"OK"ボタンをクリックすると処理を戻します。

`AskString(prompt[, default[, id[, ok[, cancel]]]])'
     ユーザに文字列値の入力を促すモーダルダイアログを表示します。
     PROMPTはプロンプトメッセージで、オプションのDEFAULT 引数は
     入力文字列の初期値です（指定しなければ`""' を使います)。
     "OK"と"Cancel"ボタンの文字列はOKとCANCELの引数で
     変更できます。文字列の長さは全て最大255文字です。
     入力された文字列か、ユーザがキャンセルした場合には`None'
     を返します。

`AskPassword(prompt[, default[, id[, ok[, cancel]]]])'
     ユーザに文字列値の入力を促すモーダルダイアログを表示します。
     `AskString()'に似ていますが、ユーザの入力したテキストは点で
     表示されます。引数は`AskString()'のものと同じ意味です。

`AskYesNoCancel(question[, default[, yes[, no[, cancel[, id]]]]])'
     プロンプトQUESTIONと"Yes"、"No"、"Cancel"というラベルの3つ
     ボタンが付いたダイアログを表示します。 ユーザが
     "Yes"を押した場合には`1' を、"No" ならば`0' を、 "Cancel"
     ならば`-1' を返します。
     <RETURN>キーを押した場合はDEFAULTの値（DEFAULT を指定
     しない場合は`0')を返します。 ボタンのテキストはそれぞれ引数
     YES、NO、CANCEL
     で変更できます。ボタンを表示したくなければ引数に`""'を指定します。

`ProgressBar([title[, maxval[, label[, id]]]])'
     プログレスバー付きのモードレスダイアログを表示します。
     これは後で述べる`ProgressBar' クラスのコンストラクタです。
     TITLEはダイアログに表示するテキスト文字列 (デフォルトの値は
     "Working...") で、 MAXVAL は処理が完了する ときの値です
     (デフォルトは`0'で、残りの作業量が不確定であることを 示します)
     。LABELはプログレスバー自体の上に表示するテキストです。

`GetArgv([optionlist[ commandlist[, addoldfile[, addnewfile[, addfolder[, id]]]]]])'
     コマンドライン引数リストの作成を補助するためのダイアログを表示します。
     得られた引数リストを `sys.argv' の形式にします。これは
     `getopt.getopt()' の引数として渡すのに適した形式です。
     ADDOLDFILE、ADDNEWFILE、ADDFOLDER はブール型の引数 です。
     これらの引数が真の場合、それぞれ実在のファイル、まだ (おそらく)
     存在
     しないファイル、フォルダへのパスをコマンドラインのパスとして設定できます。
     (注意: `getopt.getopt()' がファイルやフォルダ引数を認識できる
     ようにするためには、オブションの引数がそれらより前に現れるように
     しなければなりません。)
     空白を含む引数は、空白をシングルクォートあるいはダブルクォートで囲んで
     指定できます。

     ユーザが"Cancel"ボタンを押した場合、`SystemExit'例外を 送出します。

     OPTIONLIST には、ポップアップメニューで選べる選択肢を定義した
     リストを指定します。ポップアップメニューの要素には、次の2つの形式、
     OPTSTR または`(OPTSTR, DESCR)' があります。 DESCR
     に短い説明文字列を指定すると、該当の選択肢をポップアップ
     メニューで選択しいる間その文字列をダイアログに表示します。
     OPTSTRとコマンドライン引数の対応を以下に示します:

     OPTSTR format                      Command-line format
     ------                             -----
     `x'                                `-x' (短いオプション)
     `x:'あるいは`x='                   `-x' (値を持つ短いオプション)
     `xyz'                              `--xyz'  (長いオプション)
     `xyz:'あるいは`xyz='               `--xyz' (値を持つ長いオプション)

     COMMANDLISTはCMDSTRあるいは`(CMDSTR,
     DESCR)'の形のアイテムからなるリストです。 DESCRは上と同じです。
     CMDSTRはポップアップメニューに表示されます。メニューを選択すると
     CMDSTR はコマンドラインに追加されますが、それに続く`:' や`=' は
     (存在していれば) 取り除かれます。

     _Added in Python version 2.0_

`AskFileForOpen( [message] [, typeList] [, defaultLocation] [, defaultOptionFlags] [, location] [, clientName] [, windowTitle] [, actionButtonLabel] [, cancelButtonLabel] [, preferenceKey] [, popupExtension] [, eventProc] [, previewProc] [, filterProc] [, wanted] )'
     どのファイルを開くかをユーザに尋ねるダイアログを表示し、ユーザが選択した
     ファイルを返します。ユーザがダイアログをキャンセルした場合には`None'を
     返します。 MESSAGE はダイアログに表示するテキストメッセージです。
     TYPELIST は選択できるファイルタイプを表す 4 文字の文字列からなる
     リスト、DEFAULTLOCATIONは最初に表示すルフォルダで、パス名、
     `FSSpec' あるいは`FSRef' で指定します。 LOCATION
     はダイアログを表示するスクリーン上の位置`(x, y)'です。
     ACTIONBUTTONLABELはOKボタンの位置に"Open"の代わり
     に表示する文字列、CANCELBUTTONLABELは"Cancel"ボタンの位置
     に"Cancel"の代わりに表示する文字列です。
     WANTEDは返したい値のタイプで、`str'、`unicode'、
     A`FSSpec'、`FSRef' およびそれらのサブタイプを指定できます。

     その他の引数の説明についてはApple Navigation
     Servicesのドキュメントと
     `EasyDialogs'のソースコードを参照してください。

`AskFileForSave( [message] [, savedFileName] [, defaultLocation] [, defaultOptionFlags] [, location] [, clientName] [, windowTitle] [, actionButtonLabel] [, cancelButtonLabel] [, preferenceKey] [, popupExtension] [, fileType] [, fileCreator] [, eventProc] [, wanted] )'
     保存先のファイルをユーザに尋ねるダイアログを表示して、ユーザが選択した
     ファイルを返します。ユーザがダイアログをキャンセルした場合には`None'を
     返します。 SAVEDFILENAME は保存先のファイル名 (戻り値)
     のデフォルト値です。
     その他の引数の説明については`AskFileForOpen()'を参照してくださ い。

`AskFolder( [message] [, defaultLocation] [, defaultOptionFlags] [, location] [, clientName] [, windowTitle] [, actionButtonLabel] [, cancelButtonLabel] [, preferenceKey] [, popupExtension] [, eventProc] [, filterProc] [, wanted] )'
     フォルダの選択をユーザに促すダイアログを表示して、ユーザが選択したフォルダ
     を返します。ユーザがダイアログをキャンセルした場合には`None'を
     返します。
     引数についての説明は`AskFileForOpen()'を参照してください。

See also:
     `Navigation Services Reference'{Programmer's reference
     documentation の Carbon framework の Navigation Services の項。}

* Menu:

* プログレスバーオブジェクト::


File: python-mac-jp.info,  Node: プログレスバーオブジェクト,  Prev: EasyDialogs,  Up: EasyDialogs

2.7.1 プログレスバーオブジェクト
--------------------------------

`ProgressBar'オブジェクトでは、モードレスなプログレスバーダイアログ
のサポートを提供しています。 定量プログレスバー (温度計スタイル)
と不定量プログレスバー (床屋の螺旋看板スタイル)
がサポートされています。プログレスバーの
最大値がゼロ以上の場合には定量インジケータに、そうでない場合は不定量
インジケータになります。 _Changed in Python version 2.2_

ダイアログは作られるとすぐに表示されます。
ダイアログの"Cancel"ボタンを押すか、<Cmd-.> (コマンドキーを押し
ながらピリオド(`.')を押す) か、あるいは<ESC> をタイプ
すると、ダイアログウィンドウを非表示にして`KeyboardInterrupt'
を送出します (ただし、この応答は次にプログレスバーを更新するときまで、
すなわち次に`inc()' または`set()' を呼び出してダイアログを
更新するまで発生しません) 。
それ以外の場合、プログレスバーは`ProgressBar' オブジェクトを廃棄する
まで表示されたままになります。

`ProgressBar'オブジェクトには以下の属性とメソッドがあります。

`curval'
     プログレスバーの現在の値 (整数型あるいは長整数型) です。
     プログレスバーの通常のアクセスのメソッドによって`curval'を
     `0'と`maxval'の間にします。 この属性を直接変更してはなりません。

`maxval'
     プログレスバーの最大値　(整数型あるいは長整数型) です;
     プログレスバー (温度計, thermometer) では、`curval' が `maxval'
     に等しい時に全量に到達します。`maxval'が `0'
     の場合、不定量プログレスバー (床屋の螺旋看板, barbar pole)
     になります。この属性を直接変更してはなりません。

`title([newstr])'
     プログレスダイアログのタイトルバーのテキストをNEWSTRに設定 します。

`label([newstr])'
     プログレスダイアログ中のプログレスボックスのテキストをNEWSTR
     に設定します。

`set(value[, max])'
     プログレスバーの現在値`curval'をVALUEに設定します。 MAX
     も指定した場合、`maxval'をMAXにします。 VALUE は前もって 0
     と`maxval' の間になるよう強制的に設定
     されます。温度計バーの場合、変更内容を反映するよう表示を更新します。
     変更によって定量プログレスバーから不定量プログレスバーへ、あるいは
     その逆への推移が起こります。

`inc([n])'
     プログレスバーの`curval'をNだけ増やします。N を指定
     しなければ`1'だけ増やします。 (N は負にもでき、その場合は`curval'
     を減少させます。)
     変更内容を反映するようプログレスバーの表示を更新します。プログレスバーが
     不定量プログレスバーの場合、床屋の螺旋看板 (barbar pole) 模様を 1
     度「回転」させます。増減によって `curval' が 0 から `maxval'
     までの範囲を越えた場合、 0 と`maxval' の範囲に
     収まるよう強制的に値を設定します。


File: python-mac-jp.info,  Node: FrameWork,  Next: autoGIL,  Prev: EasyDialogs,  Up: MacPython モジュール

2.8 対話型アプリケーション・フレームワーク
==========================================

対話型アプリケーション・フレームワーク

`FrameWork' モジュールは、対話型 Macintosh アプリケーションのク
ラスで、同時にフレームワークを提供します。プログラマは、サブクラスを作っ
て基底クラスの様々なメソッドをオーバーライドし、必要な機能を実装するこ
とでアプリケーションを組み立てられます。機能のオーバーライドは、時によっ
て様々な異なるレベルで行われます。つまり、ある一つのダイアログウィンド
ウでクリックの処理を普段と違う方法で行うには、完全なイベント処理をオー
バーライドする必要はありません。

`FrameWork' の開発は事実上停止しています。現在では `PyObjC'
を使用すればPythonからCocoaの全機能を使用することがで
きます。このドキュメントでは最も重要な機能だけしか記述していませんし、
それさえも論理的な形で書かれてもいません。ソースか例題を詳しく見てくだ
さい。次にあげるのは、MacPython
ニュースグループにポストされたコメントで、 `FrameWork'
の強力さと限界について述べています。

     `FrameWork' の最大の強みは、制御の流れをたくさんの異なる部分に
     分割できることです。例えば `W' を使って、いろいろな方法でメ
     ニューをオン/オフしたり、残りをいじらずにうまくプラグインさせることが
     できます。`FrameWork' の弱点は、コマンドインタフェースが抽象化
     されていないこと(といっても難しいわけではないですが)、ダイアログサポー
     トが最低限しかないこと、それからコントロール/ツールバーサポートが全く
     ないことです。

`FrameWork' モジュールは次の関数を定義しています。

`Application()'
     アプリケーション全体を表現しているオブジェクト。メソッドについての詳細
     は以下の記述を参照してください。デフォルト `__init__()' ルーチ
     ンは、空のウィンドウ辞書とアップルメニューつきのメニューバーをを作成し
     ます。

`MenuBar()'
     メニューバーを表現するオブジェクト。このオブジェクトは普通はユーザは
     作成しません。

`Menu(bar, title[, after])'
     メニューを表現するオブジェクト。生成時には、メニューが現われる
     `MenuBar' と、TITLE 文字列、メニューが表示されるべき(1から
     始まる)位置 AFTER (デフォルトは末尾)を渡します。

`MenuItem(menu, title[, shortcut, callback])'
     メニューアイテムオブジェクトを作成します。引数は作成するメニューと、ア
     イテムのタイトル文字列、オプションのキーボードショートカット、コールバッ
     クルーチンです。コールバックは、メニューID、メニュー内のアイテム番号(1
     から数える)、現在のフロントウィンドウ、イベントレコードを引数に呼ばれ
     ます。

     呼び出し可能なオブジェクトのかわりに、コールバックは文字列でも良いです。
     この場合、メニューの選択は、最前面のウィンドウとアプリケーションの中で
     メソッド探索を引き起こします。メソッド名は、コールバック文字列の前に
     `'domenu_'' を付けたものです。

     `MenuBar' の `fixmenudimstate()'メソッドを呼びだすと、現在
     のフロントウィンドウにもとづいて、適切なディム化を全てのメニューアイテ
     ムに対してほどこします。

`Separator(menu)'
     メニューの最後にセパレータを追加します。

`SubMenu(menu, label)'
     LABEL の名前のサブメニューを、メニュー MENU の下に作成しま
     す。メニューオブジェクトが返されます。

`Window(parent)'
     (モードレス)ウィンドウを作成します。PARENT は、ウィンドウが属す
     るアプリケーションオブジェクトです。作成されたウィンドウはまだ表示され
     ません。

`DialogWindow(parent)'
     モードレスダイアログウィンドウを作成します。

`windowbounds(width, height)'
     与えた幅と高さのウィンドウを作成するのに必要な、`(LEFT, TOP,
     RIGHT, BOTTOM)' からなるタプルを返します。ウィ
     ンドウは以前のウィンドウに対して位置をずらして作成され、全体のウィンド
     ウが画面からなるべく外れないようにします。しかし、ウィンドウはいつでも
     全く同じサイズで、そのため一部は画面から隠れる場合もあります。

`setwatchcursor()'
     マウスカーソルを時計型に設定します。

`setarrowcursor()'
     マウスカーソルを矢印型に設定します。

* Menu:

* アプリケーションオブジェクト::
* ウィンドウオブジェクト::
* コントロールウィンドウオブジェクト::
* スクロールウィンドウオブジェクト::
* ダイアログウィンドウオブジェクト::


File: python-mac-jp.info,  Node: アプリケーションオブジェクト,  Next: ウィンドウオブジェクト,  Prev: FrameWork,  Up: FrameWork

2.8.1 アプリケーションオブジェクト
----------------------------------

アプリケーションオブジェクトのメソッドは各種ありますが、次のメソッドを
あげておきます。

`makeusermenus()'
     アプリケーションでメニューを使う必要がある場合、このメソッドをオーバー
     ライドします。属性 `menubar' にメニューを追加します。

`getabouttext()'
     このメソッドをオーバーライドすることで、アプリケーションの説明を記述す
     るテキスト文字列を返します。代わりに、`do_about()' メソッドをオー
     バーライドすれば、もっと凝った"アバウト"メッセージを出す事ができます。

`mainloop([mask[, wait]])'
     このルーチンがメインイベントループで、作成したアプリケーションが動き出
     すためにはこれを呼ぶことになります。MASK は操作したいイベントを
     選択するマスクです。 WAIT は並行に動作しているアプリケーションに
     割り当てたいチック数(1/60秒)です(デフォルトで 0
     ですが、あまり良い値で はありません)。SELF
     フラグを立ててメインループを抜ける方法はまだ
     サポートされていますが、これはお勧めできません。代わりに
     `self._quit()'を呼んでください。

     イベントループは小さなパーツに分割されていて、各々をオーバーライドでき
     るようになっています。これらのメソッドは、デフォルトでウィンドウとダイ
     アログや、ドラッグとリサイズの操作、
     AppleEvent、非FrameWorkのウィンド
     ウに関するウィンドウの操作などに関するイベントを分岐することなどまで面
     倒をみてくれます。

     原則として、全てのイベントハンドラは、イベントが完全に取り扱われた場合
     は `1' を返さなくてはいけませんし、それ以外では `0' を返さな
     くてはいけません(例えば、前面のウィンドウは FrameWork
     ウィンドウではな
     い場合を考えてください)。こうしなくてはいけない理由は、アップデートイ
     ベントなどが Sioux
     コンソールウィンドウなどの他のウィンドウにきちんと渡さ
     れるようにするためです。OUR_DISPATCH やその呼び出し元の内部から
     `MacOS.HandleEvent()' を呼んではいけません。そうしたコードが
     Python
     の内部ループのイベントハンドラを経由して呼ばれると、無限ループ
     になりかねないからです。

`asyncevents(onoff)'
     非同期でイベント操作をしたい場合は、非ゼロの引数でこのメソッドを呼んで
     ください。こうすることで、イベントが生じた時に、内部のインタプリタのルー
     プで、アプリケーションイベントハンドラ ASYNC_DISPATCH が呼ばれる
     ことになります。すると、長時間の計算を行っている場合でも、FrameWorkウィ
     ンドウがアップデートされ、ユーザーインターフェースが動き続けるようにな
     ります。ただし、インタプリタの動作が減速し、非リエントラントのコード
     (例えばFrameWork自身など)に奇妙な動作が見られるかもしれません。デフォル
     トでは ASYNC_DISPATCH はすぐに OUR_DISPATCH を呼びますが、
     このメソッドをオーバーライドすると、特定のイベントを非同期で操作しても
     良くなります。処理しないイベントは Sioux
     などに渡されることになります。

     onあるいはoff値が返されます。

`_quit()'
     実行中の `mainloop()' 呼び出しを、次の適当なタイミングで終了さ
     せます。

`do_char(c, event)'
     ユーザーが文字 C をタイプした時に呼ばれます。イベントの全詳細は
     event構造体の中にあります。このメソッドはウィンドウオブジェクト内で使
     うためにも提供されています。このオブジェクトのウィンドウが最前面にある
     場合は、アプリケーション全般について本ハンドラをオーバーライドします。

`do_dialogevent(event)'
     イベントループ内部で最初に呼ばれて、モードレスダイアログイベントを処理
     します。デフォルトではメソッドは単にイベントを適切なダイアログに分岐す
     るだけです(関連したダイアログウィンドウオブジェクトを経由してではあり
     ません)。特別にダイアログイベント(キーボードショートカットなど)を処理す
     る必要がある場合にオーバーライドしてください。

`idle(event)'
     イベントが無い場合にメインイベントループから呼ばれます。 null
     イベン
     トも渡されます(つまりマウス位置などを監視することができます)。


File: python-mac-jp.info,  Node: ウィンドウオブジェクト,  Next: コントロールウィンドウオブジェクト,  Prev: アプリケーションオブジェクト,  Up: FrameWork

2.8.2 ウィンドウオブジェクト
----------------------------

ウィンドウオブジェクトは特に次のメソッドを持ちます。

`open()'
     ウィンドウを開く時はこのメソッドをオーバーライドします。MacOS
     ウィンド ウ ID を `self.wid' に入れて `do_postopen()' メソッドを
     呼ぶと、親アプリケーションにウィンドウを登録します。

`close()'
     ウィンドウを閉じるときに特別な処理をする場合はこのメソッドをオーバーラ
     イドします。親アプリケーションからウィンドウの登録を削除するには、
     `do_postclose()' を呼びます。

`do_postresize(width, height, macoswindowid)'
     ウィンドウがリサイズされた後に呼ばれます。`InvalRect' を呼び出す
     以外にもすることがある場合はこれをオーバーライドします。

`do_contentclick(local, modifiers, event)'
     ウィンドウのコンテント部分をユーザーがクリックすると呼ばれます。引数は
     位置座標(ウィンドウを基準)、キーモディファイア、生のイベントです。

`do_update(macoswindowid, event)'
     ウィンドウのアップデートイベントが受信された時に呼ばれます。ウィンドウ
     を再描画します。

`do_activate(activate, event)'
     ウィンドウがアクティブ化(`ACTIVATE == 1')、非アクティブ化
     (`ACTIVATE == 0')する際に呼ばれます。フォーカスのハイライト
     などを処理します。


File: python-mac-jp.info,  Node: コントロールウィンドウオブジェクト,  Next: スクロールウィンドウオブジェクト,  Prev: ウィンドウオブジェクト,  Up: FrameWork

2.8.3 コントロールウィンドウオブジェクト
----------------------------------------

コントロールウィンドウオブジェクトには `Window' オブジェクトのメ
ソッドの他に次のメソッドがあります。

`do_controlhit(window, control, pcode, event)'
     コントロール CONTROL のパートコード PCODE がユーザーにヒットされた
     場合に呼ばれます。トラッキングなどは任せておいてかまいません。


File: python-mac-jp.info,  Node: スクロールウィンドウオブジェクト,  Next: ダイアログウィンドウオブジェクト,  Prev: コントロールウィンドウオブジェクト,  Up: FrameWork

2.8.4 スクロールウィンドウオブジェクト
--------------------------------------

スクロールウィンドウオブジェクトは、次のメソッドを追加したコントロール
ウィンドウオブジェクトです。

`scrollbars([wantx[, wanty]])'
     水平スクロールバーと垂直スクロールバーを作成します(あるいは破棄します)。
     引数はどちらが欲しいか指定します(デフォルトは両方)。スクロールバーは常
     に最小値 `0' 、最大値 `32767' です。

`getscrollbarvalues()'
     このメソッドは必ず作っておかなくてはいけません。現在のスクロールバーの
     位置を与えるタプル `(X, Y)' を(`0' の `32767'
     間で)返してください。バーの方向について全文書が可視状態で
     あること知らせるため `None' を返す事もできます。

`updatescrollbars()'
     文書に変更があった場合はこのメソッドを呼びます。このメソッドは
     `getscrollbarvalues()' を呼んでスクロールバーを更新します。

`scrollbar_callback(which, what, value)'
     あらかじめ与えておくメソッドで、ユーザーとの対話により呼ばれます。
     WHICH は `'x'' か `'y'' 、WHATは `'-'', `'--'', `'set'',`'++'',
     `'+''のどれかです。 `'set''
     の場合は、VALUEに新しいスクロールバー位置を入れてお きます。

`scalebarvalues(absmin, absmax, curmin, curmax)'
     `getscrollbarvalues()' の結果から値を計算するのを助ける補助的な
     メソッドです。文書の最小値と最大値、可視部分に関する最先頭値(最左値)と
     最底値(最右値)を渡すと、正しい数か `None' を返します。

`do_activate(onoff, event)'
     ウィンドウが最前面になった時、スクロールバーのディム(dimming)/ハイライ
     トの面倒をみます。このメソッドをオーバーライドするなら、オーバーライド
     したメソッドの最後でオリジナルのメソッドを呼んでください。

`do_postresize(width, height, window)'
     スクロールバーを正しい位置に移動させます。オーバーライドする時は、オー
     バーライドしたメソッドの一番最初でオリジナルのメソッドを呼んでください。

`do_controlhit(window, control, pcode, event)'
     スクロールバーのインタラクションを処理します。これをオーバーライドする
     時は、オリジナルのメソッドを最初に呼び出してください。非ゼロの返り値は
     スクロールバー内がヒットされたことを意味し、実際に処理が進むことになり
     ます。


File: python-mac-jp.info,  Node: ダイアログウィンドウオブジェクト,  Prev: スクロールウィンドウオブジェクト,  Up: FrameWork

2.8.5 ダイアログウィンドウオブジェクト
--------------------------------------

ダイアログウィンドウオブジェクトには、`Window' オブジェクトのメソッ
ドの他に次のメソッドがあります。

`open(resid)'
     ID RESID の DLOG リソースからダイアログウィンドウを作成します。
     ダイアログオブジェクトは `self.wid' に保存されます。

`do_itemhit(item, event)'
     アイテム番号 ITEM がヒットされた時に呼ばれます。トグルボタンなど
     の再描画は自分で処理してください。


File: python-mac-jp.info,  Node: autoGIL,  Prev: FrameWork,  Up: MacPython モジュール

2.9 イベントループ中のグローバルインタープリタの取り扱い
========================================================

イベントループ中のグローバルインタープリタの取り扱い

`autoGIL'モジュールは、自動的にイベントループを実行する場合 、 Python
のグローバルインタープリタをロックしたり、ロックの解除をした
りするための関数 `installAutoGIL' を提供します。

`AutoGILError'
     例えば現在のスレッドがループしていないなど、オブザーバにコールバックが
     できない場合に発生します。

`installAutoGIL()'
     現在のスレッドのイベントループ(CFRunLoop)中のオブザーバにコールバッ
     クを行ない、適切な時にグローバルインタープリタロック(GIL)を、イ
     ベントループが使用されていない間、他の Python スレッドの起動がで
     きるようにロックしたり、ロックの解除をしたりします。

     有効性：OSX 10.1以降


File: python-mac-jp.info,  Node: MacPython OSA モジュール,  Next: MacOS ツールボックスモジュール,  Prev: MacPython モジュール,  Up: Top

3 MacPython OSA モジュール
**************************

本章では、オープンスクリプティングアーキテクチャ(Open Scripting
Architecure、OSA、一般的には AppleScript と呼ばれる)の現在の Python
用実装について説明します。 Python
プログラムからスクリプト可能なアプリケーションを操作したり、 Python
へのインターフェースを備えたものにすることができます。
このモジュール群の開発はすでに終わっており、Python 2.5
では別のものが登場する予定です。

AppleScript と OSA の様々なコンポーネントの記述のために、また、アーキ
テクチャおよび用語についての理解を得るために、アップルの文書を読む必
要があります。"Applescript Language Guide"
は概念のモデルおよび用語、Standard Suiteについ
て説明した文書です。"Open Scripting Architecture" 文書は、ア
プリケーションプログラマの視点から OSA を使用する方法について説明
しています。これらの文書はAppleヘルプビューワのDeveloper Documentation
中のCore Technologiesセクションにあります。

アプリケーションをスクリプトで操作する例として、次の AppleScript  は、
一番前の `Finder' ウィンドウの名前を取得し、それを印字します。

     tell application "Finder"
         get name of window 1
     end tell

Pythonでは以下のコードで同じ事ができます。

     import Finder

     f = Finder.Finder()
     print f.get(f.window(1).name)

配布されている Python ライブラリは、Standard Suite を実装したパッケー
ジに加えて、いくつかの一般的なアプリケーションへのインターフェースを実
装したパッケージが含まれています。

アプリケーションに AppleEvent を送るためには、アプリケーションの用語
(`Script Editor'が「辞書」と呼ぶもの)に接続する Python パッケー
ジを最初に作成しなければなりません。これは、`PythonIDE' の内部
から、あるいは、コマンドラインからのスタンドアロンのプログラムとして
`gensuitemodule.py' モジュールを実行することにより行うことができ ます。

`gensuitemodule.py' モジュールで生成される出力は多くのモジュール
を備えたパッケージのため、全ての Suite をプログラムの中で 1 つにまとめ
て利用できるようにするために `__init__' モジュールが追加されて
います。Python 継承グラフは  AppleScript 継承グラフを理解するので、
Standard Suite をサポートしていて、余分な引数を備えた1つあるいは2つの
変数を拡張する事ができるようにプログラム辞書が書かれていた場合、出力さ
れた Suite は、`StdSuites.Standard_Suite' からすべてをインポー
トして再エクスポートし、さらに拡張機能をもったメソッドをオーバーライド
するモジュール `Standard_Suite' を含みます。 `gensuitemodule'
の出力は人間に判読可能で、Python docstrings中 にはオリジナルの
AppleScript 辞書にあった文書を含んでいます。したがっ
て、それを読むことは有用な情報源となります。

出力されたパッケージは、メソッドとして AppleScript 変数をすべて含み、
第1の引数としての直接オブジェクトを含み、キーワード引数としてのすべて
のオプションの引数を含む、パッケージと同じ名前を備えた主要なクラスを実
装しています。また AppleScript クラスは Python クラス、そして類事物そ
の他のもろもろの物として実装されています。

変数を実装する主要な Python クラスは、さらに AppleScriptクラス
"application" で宣言されたプロパティおよび要素へのアクセスを許可します。
現在のリリースでオブジェクト指向的にやろうとするならば、例えば、より
Python 的な `f.window(1).name.get()' の代りに `f.get(f.window(1).name)'
を利用する必要があります。

AppleScript 識別子が Python 識別子と同じでない場合、名前は少数の規則に
よって判別します。
   * スペースは下線に置換されます。

   * `_xx_' が16進法の文字値である場合、他の英数字でない文字は `xx'
     と置換されます。

   * あらゆるPython 予約語には下線を追加します。

Python は、さらに Python でスクリプト対応アプリケーションを作成する事
をサポートしています。次のモジュールはMacPythonのAppleScriptサポートに
適切です。

さらに、`Finder', `Terminal', `Explorer', `Netscape', `CodeWarrior',
`SystemEvents' そして `StdSuites'
のサポートモジュールは、あらかじめ生成されています。

* Menu:

* gensuitemodule::
* aetools::
* aepack::
* aetypes::
* MiniAEFrame::


File: python-mac-jp.info,  Node: gensuitemodule,  Next: aetools,  Prev: MacPython OSA モジュール,  Up: MacPython OSA モジュール

3.1 OSA スタプ作成パッケージ
============================

OSA辞書からスタブパッケージを作成します。

`gensuitemodule' モジュールは AppleScript 辞書によって特定のア
プリケーションに実装されている AppleScript 群のためのスタブコードを実
装した Python パッケージを作成します。

このモジュールは、通常は `PythonIDE' からユーザによって起動さ
れますが、コマンドラインからスクリプトとして実行する(オプションとして
ヘルプに `--help' を与えてみてください)こともできますし、Python
コードでインポートして利用する事もできます。使用例として、どのようにし
て標準ライブラリに含まれているスタブパッケージを生成するか、
`Mac/scripts/genallsuites.py' にあるソースを見てください。

このモジュールは次の関数を定義しています。

`is_scriptable(application)'
     `application' としてパス名を与えたアプリケーションがスクリプト可
     能でありそうな場合、真を返します。返り値はやや不確実な場合があります。
     `Internet Explorer' はスクリプト不可能なように見えてしまいます
     が、実際はスクリプト可能です。

`processfile(application[, output, basepkgname,  edit_modnames, creatorsignature, dump, verbose])'
     パス名として渡された `application' のためのスタブパッケージを作成
     します。`.app' として一つのパッケージにまとめてあるプログラム群の
     ために内部の実行プログラムそのものではなくパッケージへのパス名を渡すだ
     けでよくなっています。パッケージ化されていないCFM
     アプリケーションでは
     アプリケーションバイナリのファイル名を渡す事もできます。

     この関数は、アプリケーションの OSA
     用語リソースを捜し、これらのリソー
     スを読み取り、その結果データをクライアントスタブを実装したPython
     コー ドパッケージを作成するために使用します。

     `output' は作成結果のパッケージを保存するパス名で、指定しない場合
     は標準の「別名で保存(save file as)」ダイアログが表示されます。
     `basepkgname' はこのパッケージの基盤となるパッケージを指定します。
     デフォルトは `StdSuites' になります。`StdSuites' 自体を
     生成する場合だけ、このオプションを指定する必要があります。
     `edit_modnames' は自動生成によって作成されてあまり綺麗ではないモ
     ジュール名を変更するために使用することができる辞書です。
     `creator_signature' はパッケージ中の `PkgInfo' ファイル、あ るいは
     CFM ファイルクリエータ署名から通常得られる4文字クリエータコード
     を無視するために使用することができます。`dump' にはファイルオブジェ
     クトを与えます、これを指定するとリソースを読取った後に停止して
     `processfile' がコード化した用語リソースの Python 表現をダンプし
     ます。`verbose' にもまたファイルオブジェクトを与え、これを指定する
     と `processfile' の行なっている処理の詳細を出力します。

`processfile_fromresource(application[, output,  basepkgname, edit_modnames, creatorsignature, dump, verbose])'
     この関数は、用語リソースを得るのに異なる方法を使用する以外は、
     `processfile' と同じです。この関数では、リソースファイルとして
     `application' を開き、このファイルから  `"aete"' および `"aeut"'
     リソースをすべて読み込む事で、AppleScript 用語リソース読み
     込みを行ないます。


File: python-mac-jp.info,  Node: aetools,  Next: aepack,  Prev: gensuitemodule,  Up: MacPython OSA モジュール

3.2 OSA クライアントのサポート
==============================

Apple Eventを送るための基本的なサポート

`aetools' モジュールは Python で AppleScript クライアントとして
の機能をサポートするアプリケーションを構築するための基本的な機能を含ん
でいます。さらに、このモジュールは、 `aetypes' および `aepack'
モジュールの中核機能をインポートし再 エクスポートします。
`gensuitemodule' によって生成されたスタブパッケージは `aetools'
のかなり適切な部分をインポートするので、通常はそれを
明示的にインポートする必要はありません。生成されたパッケージ群を使用す
ることができない場合と、スクリプト対応のためにより低いレベルのアクセス
を必要としている場合、例外が発生します。

`aetools' モジュールはそれ自身、`Carbon.AE' モジュールに
よって提供される AppleEvent サポートを利用します。このモジュールにはウィ
ンドウマネージャへのアクセスを必要とするという1つの欠点があります。詳
細は第  *Note 設定:: 章を見てください。この制限は将来のリリー
スで撤廃されるかもしれません。

`aetools' モジュールは下記の関数を定義しています。

`packevent(ae, parameters, attributes)'
     あらかじめ作成された `Carbon.AE.AEDesc' オブジェクト中のパラメー
     ターおよび属性を保存します。`parameters' と `attributes' は Python
     オブジェクトの4文字の OSA パラメータのキーを写像した辞書です。
     このオブジェクトをパックするには `aepack.pack()' を使います。

`unpackevent(ae[, formodulename])'
     再帰的に、`Carbon.AE.AEDesc' イベントをPython オブジェクトへアン
     パックします。関数は引数の辞書および属性の辞書を返します。
     `formodulename' 引数は AppleScript クラスをどこに捜しに行くか制御
     するために、生成されたスタブパッケージにより使用されます。

`keysubst(arguments, keydict)'
     Python キーワード引数辞書 `arguments' を、写像による4文字の OSA
     キーとして `keydict' の中で指定されたPython 識別子であるキーの交
     換により `packevent' によって要求されるフォーマットへ変換します。
     生成されたパッケージ群によって使用されます。

`enumsubst(arguments, key, edict)'
     `arguments' 辞書が `key' へのエントリーを含んでいる場合、辞 書
     `edict' のエントリーに見合う値に変換します。これは人間に判読可
     能なように Python 列挙名を OSA
     4文字のコードに変換します。生成されたパッ
     ケージ群によって使用されます。

`aetools' モジュールは次のクラスを定義しています。

`TalkTo([signature=None, start=0, timeout=0])'
     アプリケーションとの対話に利用する代理の基底クラスです。
     `signature' はクラス属性 `_signature' (サブクラスによって通
     常設定される)を上書きした、対話するアプリケーションを定義する4文字クリ
     エートコードです。`start' にはクラスインスタンス上でアプリケーショ
     ンを実行することを可能にするために、真を設定する事ができます。
     `timeout' を明示的に設定する事で、 AppleEvent の返答を待つデフォ
     ルトのタイムアウト時間を変更する事ができます。

`_start()'
     アプリケーションが起動していてるか確認し、起動していなければ起動しよう
     とします。

`send(code, subcode[, parameters, attributes])'
     OSA指示子  `code, subcode' (いずれも通常4文字の文字列です)を持った
     変数のために、`parameters' をパックし、`attributes'に戻し、
     目標アプリケーションにそれを送って、返答を待ち、`unpackevent' を
     含んだ返答をアンパックし、AppleEvent
     の返答を返し、辞書としてアンパッ
     クした値と属性を返して、AppleEvent `Carbon.AE.AEDesc' を作成しま
     す。


File: python-mac-jp.info,  Node: aepack,  Next: aetypes,  Prev: aetools,  Up: MacPython OSA モジュール

3.3 Python変数とAppleEventデータコンテナ間の変換
================================================

Python変数とAppleEventデータコンテナ間の変換

`aepack' モジュールは、Python 変数から AppleEvent ディスクリプ
タへの変換(パック)と、その逆に変換(アンパック)する関数を定義しています。
Python 内では AppleEvent ディスクリプタは、組み込み型である AEDesc の
Python オブジェクトとして扱われます。`AEDesc' は `Carbon.AE'
モジュールで定義されています。

`aepack' モジュールは次の関数を定義しています。

`pack(x[, forcetype])'
     Python 値 x を変換した値を保持する `AEDesc' オブジェクトを返しま
     す。FORCETYPE が与えることで、結果のディスクリプタ型を指定できま
     す。それ以外では、Python 型から Apple
     Eventディスクリプタ型へのデフォ
     ルトのマッピングが使われます。マッピングは次の通りとなります。

     Python type                        descriptor type
     ------                             -----
     `FSSpec'                           typeFSS
     `FSRef'                            typeFSRef
     `Alias'                            typeAlias
     integer                            typeLong (32 bit integer)
     float                              typeFloat (64 bit floating point)
     string                             typeText
     unicode                            typeUnicodeText
     list                               typeAEList
     dictionary                         typeAERecord
     instance                           _see below_

     X がPythonインスタンスなら、この関数は `__aepack__()' メ
     ソッドを呼びだそうとします。このメソッドは `AEDesc' オブジェ
     クトを返します。

     X の変換が上で定義されていない場合は、この関数は、テキストディス
     クリプタとしてエンコードされた、値の(repr()関数による)Python文字列表現
     が返されます。

`unpack(x[, formodulename])'
     X は `AEDesc' タイプのオブジェクトでなければいけません。
     この関数は、Apple Eventディスクリプタ X のデータのPythonオブジェ
     クト表現を返します。単純なAppleEventデータ型(整数、テキスト、浮動少
     数点数)の、対応するPython型が返されます。Apple
     EventリストはPythonリ
     ストとして返され、リストの要素は再帰的にアンパックされます。
     `formodulename' の指定がない場合、オブジェクト参照 (例：`line 3 of
     document 1')が、`aetypes.ObjectSpecifier' のインスタ
     ンスとして返されます。ディスクリプタ型がtypeFSSであるAppleEventディ
     スクリプタが、`FSSpec' オブジェクトとして返されます。
     AppleEventレコードディスクリプタが、再帰的にアンパックされた、型の4
     文字キーと要素を持つPython辞書として返されます。

     オプションの `formodulename' 引数は `gensuitemodule' よ
     り作成されるスタブパッケージにより利用され、オブジェクト指定子のため
     の OSA
     クラスをモジュールの中で見つけられることを保証します。これは、
     例えば、ファインダがウィンドウに対してオブジェクト指定子を返す場合、
     `Finder.Window' のインスタンスが得られ、`aetypes.Window'
     が得られないことを保証します。前者は、ファインダ上のウィンドウが持っ
     ている、すべての特性および要素のことを知っています。一方、後者のもの
     はそれらのことを知りません。

See also:
     *Note CarbonAE:: Apple Eventマネージャルーチンへの組み込みアクセス
     *Note aetypes:: Apple
     Eventディスクリプタ型としてコードされたPython定義 ` Inside
     Macintosh: Interapplication
     Communication'{Macintosh上でのプロセス間通信に関する情報}


File: python-mac-jp.info,  Node: aetypes,  Next: MiniAEFrame,  Prev: aepack,  Up: MacPython OSA モジュール

3.4 AppleEvent オブジェクト
===========================

Apple Event オブジェクトモデルの Python 表現

`aetypes' では、 Apple Event データデスクリプタ (data descriptor) や
Apple Eventオブジェクト指定子 (object specifier)
を表現するクラスを定義しています。

Apple Event データはデスクリプタに含まれていて、これらのデスクリプタは
片付けされています。多くのデスクリプタは、単に対応するPython の型で
表現されています。例えば、OSA 中の `typeText' は Python 文字
列型で、`typeFloat' は 浮動小数点型になる、といった具合です。
このモジュールでは、OSA の型のうち、直接的に対応する Python の型がない
もののためにクラスを定義しています。そのようなクラスのインスタンスに対
するパックやアンパック操作は、 `aepack' モジュール自動的に処理 します。

オブジェクト指定子は、本質的には Apple Event サーバ中に実装されている
オブジェクトへのアドレスです。Apple Event 指定子は、Apple Event の
オブジェクトそのものとして、あるいはオプションパラメタの引数として
使われます。 `aetypes' モジュールには OSA
クラスやプロパティを表現するための
基底クラスが入っています。これらのクラスは、`gensuitemodule'
が生成するパッケージ内で、目的に応じてクラスやプロパティを増やす
際に使われます。

以前のバージョンとの互換性や、スタブパッケージを生成していないような
アプリケーションをスクリプトで書く必要がある場合のために、
このモジュールには`Document' 、`Window'、`Character'、
といったよく使われる OSA クラスのいくつかを指定できるオブジェクト
指定子も入っています。

`AEObjects' モジュールでは、以下のようなクラスを定義して、 Apple Event
デスクリプタデータを表現しています:

`Unknown(type, data)'
     `aepack' や `aetypes' がサポートしていない OSA の
     デスクリプタデータ、すなわち、このモジュールで扱っている他のクラスや、
     Python
     の組み込み型の値で表現されていないようなデータを表現するクラスです。

`Enum(enum)'
     列挙値 (enumeration value) を表すクラスです。 値は 4
     文字の文字列型になります。

`InsertionLoc(of, pos)'
     オブジェクト `of' の中の `pos' の位置を表すクラスです。

`Boolean(bool)'
     ブール値 (真偽値) を表すクラスです。

`StyledText(style, text)'
     スタイル情報 (フォント、タイプフェイスなど) つきのテキストを表す
     クラスです。

`AEText(script, style, text)'
     スクリプトシステム (script system) およびスタイル情報の入った
     テキストを表すクラスです。

`IntlText(script, language, text)'
     スクリプトシステムと言語情報 (language information) の入った
     テキストを表すクラスです。

`IntlWritingCode(script, language)'
     スクリプトシステムと言語情報を表すクラスです。

`QDPoint(v, h)'
     QuickDrawの点を表すクラスです。

`QDRectangle(v0, h0, v1, h1)'
     QuickDrawの矩形を表すクラスです。

`RGBColor(r, g, b)'
     色を表すクラスです。

`Type(type)'
     OSA の型 (type value) を表すクラスです。 4
     文字からなる名前を値に持ちます。

`Keyword(name)'
     OSA のキーワードです。 4 文字からなる名前を値に持ちます。

`Range(start, stop)'
     範囲を表すクラスです。

`Ordinal(abso)'
     先頭を表す `"firs"' や中央を表す`"midd"' のように、
     数値でない絶対位置指定子を表すクラスです。

`Logical(logc, term)'
     演算子 `logc' を`term' に適用したときの論理式を 表すクラスです。

`Comparison(obj1, relo, obj2)'
     `obj1' と `obj2' の `relo' による比較を表すクラスです。

以下のクラスは、生成されたスタブパッケージが、 AppleScript
のクラスやプロパティを Python で表現する上で
基底クラスとして利用します。

`ComponentItem(which[, fr])'
     OSA クラス用の抽象基底クラスです。サブクラスでは、クラス属性
     `want' を 4 文字の OSA クラスコードに設定せねばなりません。
     このクラスのサブクラスのインスタンスは AppleScript
     オブジェクト指定子
     と同じになります。インスタンス化を行う最には、`which' にセレクタを
     渡さねばなりません。また、任意で親オブジェクトを`fr' に渡せます。

`NProperty(fr)'
     OSA プロパティ用の抽象基底クラスです。サブクラスでは、クラス属性
     `want' と `which' を設定して、どのプロパティを表しているかを
     指定せねばなりません。このクラスのサブクラスのインスタンスは
     オブジェクト指定子と同じになります。

`ObjectSpecifier(want, form, seld[, fr])'
     `ComponentItem' と `NProperty' の基底クラスで、汎用の OSA
     オブジェクト指定子を表します。パラメタの説明は Apple Open
     Scripting Architecture のドキュメントを参照してください。
     このクラスは抽象クラスではないので注意してください。


File: python-mac-jp.info,  Node: MiniAEFrame,  Prev: aetypes,  Up: MacPython OSA モジュール

3.5 オープンスクリプティングアーキテクチャサーバのサポート
==========================================================

オープンスクリプティングアーキテクチャ(OSA)サーバ("Apple
Events")のサポート。

`MiniAEFrame'モジュールは、アプリケーションにオープンスクリプ
ティングアーキテクチャ (OSA)サーバ機
能を持たせるためのフレームワークを提供します。つまり、 AppleEvents の受信と処理を行わせます。
`FrameWork' と連携させても良いし、単独 でも使えます。
実例として、このモジュールは`PythonCGISlave'の中で使われていま す。

`MiniAEFrame'には以下のクラスが定義されています。

`AEServer()'
     AppleEventの分岐を処理するクラス。作成するアプリケーションはこのクラス
     と、`MiniApplication'あるいは`FrameWork.Application'のサブク
     ラスでなければなりません。サブクラス化したクラスでは`__init__()'
     メソッドで、継承した両方のクラスの`__init__()'メソッドを呼びださ
     なければなりません。

`MiniApplication()'
     `FrameWork.Application'とある程度互換なクラスですが、機能は少ない
     です。このクラスのイベントループはアップルメニュー、Cmd-.(コマンドキーを押しながらピリオド.を押す)、
     AppleEventをサポートします。他のイベントはPythonインタープリタかSioux（CodeWarriorの
     コンソールシステム）に渡されます。作成するアプリケーションで
     `AEServer'を使いたいが、独自のウィンドウなどを持たない場合に便利で
     す。

* Menu:

* AEServer オブジェクト::


File: python-mac-jp.info,  Node: AEServer オブジェクト,  Prev: MiniAEFrame,  Up: MiniAEFrame

3.5.1 AEServer オブジェクト
---------------------------

`installaehandler(classe, type, callback)'
     AppleEventハンドラをインストールします。CLASSEとTYPEは4文字
     のOSAクラスとタイプの指定子で、ワイルドカード`'****''も使えます。対
     応するAppleEventを受けるとパラメータがデコードされ、与えたコールバックが
     呼び出されます。

`callback(_object, **kwargs)'
     与えたコールバックは、OSAダイレクトオブジェクトを1番目のパラメータとして
     呼び出されます。他のパラメータは4文字の指定子を名前にしたキーワード引数
     として渡されます。他に3つのキーワード・パラメータが渡されます。つまり、
     `_class'と`_type'はクラスとタイプ指定子で、`_attributes'
     はAppleEvent属性を持つ辞書です。

     与えたメソッドの返り値は`aetools.packevent()'でパックされ、リプ
     ライとして送られます。

現在のクラス設計にはいくつか重大な問題があることに注意してください。引数
に名前ではない4文字の指定子を持つAppleEventはまだ実装されていないし、イ
ベントの送信側にエラーを返すこともできません。この問題は将来のリリースま
で先送りにされています。


File: python-mac-jp.info,  Node: MacOS ツールボックスモジュール,  Next: 文書化されていないモジュール,  Prev: MacPython OSA モジュール,  Up: Top

4 MacOS ツールボックスモジュール
********************************

各種のMacOSツールボックスへのインターフェースを与えるモジュール群があ
ります。対応するモジュールがあるなら、そのモジュールではツールボックス
で宣言された各種の構造体のPythonオブジェクトが定義され、操作は定義され
たオブジェクトのメソッドとして実装されています。その他の操作はモジュー
ルの関数として実装されています。 Cで可能な操作がすべてPythonで可能なわ
けではありませんし(コールバックはよく問題になります)、パラメータが
Pythonだと違ってしまうことはよくあります(特に入力バッファや出力バッファ)。
全てのメソッドと関数は `__doc__' 文字列があるので、引数と返り値
の説明を得る事ができます。他の情報源としては、 などを参照してください。

これらのモジュールは全て `Carbon' パッケージに含まれています。
この名前にもかかわらずそれら全てが Carbon フレームワークの一部なわけで
はありません。CF は、CoreFoundationフレームワークの中に実際はあります
し、QtはQuickTimeフレームワークにあります。ツールボックスモジュールは普通以下
のようにして利用します。

     from Carbon import AE

*注意！*これらのモジュールはまだ文書化されていません。これらの
モジュールのどれでもよいですが文書化に協力したいという方は、
<docs@python.org> まで連絡をください。

* Menu:

* CarbonAE::
* CarbonAH::
* CarbonApp::
* CarbonCF::
* CarbonCG::
* CarbonCarbonEvt::
* CarbonCm::
* CarbonCtl::
* CarbonDlg::
* CarbonEvt::
* CarbonFm::
* CarbonFolder::
* CarbonHelp::
* CarbonList::
* CarbonMenu::
* CarbonMlte::
* CarbonQd::
* CarbonQdoffs::
* CarbonQt::
* CarbonRes::
* CarbonScrap::
* CarbonSnd::
* CarbonTE::
* CarbonWin::
* ColorPicker::


File: python-mac-jp.info,  Node: CarbonAE,  Next: CarbonAH,  Prev: MacOS ツールボックスモジュール,  Up: MacOS ツールボックスモジュール

4.1 Apple Events
================

Apple Eventツールボックスへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonAH,  Next: CarbonApp,  Prev: CarbonAE,  Up: MacOS ツールボックスモジュール

4.2 Apple ヘルプ
================

Apple ヘルプマネージャへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonApp,  Next: CarbonCF,  Prev: CarbonAH,  Up: MacOS ツールボックスモジュール

4.3 アピアランスマネージャ
==========================

アピアランスマネージャへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonCF,  Next: CarbonCG,  Prev: CarbonApp,  Up: MacOS ツールボックスモジュール

4.4 Core Foundation
===================

Core Foundationへのインタフェース

`CFBase', `CFArray', `CFData', `CFDictionary', `CFString' と `CFURL'
オブジェクトがいくらか部分的にサポート されています。


File: python-mac-jp.info,  Node: CarbonCG,  Next: CarbonCarbonEvt,  Prev: CarbonCF,  Up: MacOS ツールボックスモジュール

4.5 Core Graphics
=================

Component Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonCarbonEvt,  Next: CarbonCm,  Prev: CarbonCG,  Up: MacOS ツールボックスモジュール

4.6 Carbon Event Manager
========================

Carbon Event Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonCm,  Next: CarbonCtl,  Prev: CarbonCarbonEvt,  Up: MacOS ツールボックスモジュール

4.7 Component Manager
=====================

Component Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonCtl,  Next: CarbonDlg,  Prev: CarbonCm,  Up: MacOS ツールボックスモジュール

4.8 Control Manager
===================

Control Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonDlg,  Next: CarbonEvt,  Prev: CarbonCtl,  Up: MacOS ツールボックスモジュール

4.9 Dialog Manager
==================

Dialog Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonEvt,  Next: CarbonFm,  Prev: CarbonDlg,  Up: MacOS ツールボックスモジュール

4.10 Event Manager
==================

Event Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonFm,  Next: CarbonFolder,  Prev: CarbonEvt,  Up: MacOS ツールボックスモジュール

4.11 Font Manager
=================

Font Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonFolder,  Next: CarbonHelp,  Prev: CarbonFm,  Up: MacOS ツールボックスモジュール

4.12 Folder Manager
===================

Folder Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonHelp,  Next: CarbonList,  Prev: CarbonFolder,  Up: MacOS ツールボックスモジュール

4.13 Help Manager
=================

Carbon Help Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonList,  Next: CarbonMenu,  Prev: CarbonHelp,  Up: MacOS ツールボックスモジュール

4.14 List Manager
=================

List Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonMenu,  Next: CarbonMlte,  Prev: CarbonList,  Up: MacOS ツールボックスモジュール

4.15 Menu Manager
=================

Menu Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonMlte,  Next: CarbonQd,  Prev: CarbonMenu,  Up: MacOS ツールボックスモジュール

4.16 MultiLingual Text Editor
=============================

MultiLingual Text Editorへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonQd,  Next: CarbonQdoffs,  Prev: CarbonMlte,  Up: MacOS ツールボックスモジュール

4.17 QuickDraw
==============

QuickDrawツールボックスへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonQdoffs,  Next: CarbonQt,  Prev: CarbonQd,  Up: MacOS ツールボックスモジュール

4.18 QuickDraw Offscreen
========================

QuickDrawオフスクリーン APIへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonQt,  Next: CarbonRes,  Prev: CarbonQdoffs,  Up: MacOS ツールボックスモジュール

4.19 QuickTime
==============

QuickTime ツールボックスへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonRes,  Next: CarbonScrap,  Prev: CarbonQt,  Up: MacOS ツールボックスモジュール

4.20 Resource Manager and Handles
=================================

Resource Managerとハンドルへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonScrap,  Next: CarbonSnd,  Prev: CarbonRes,  Up: MacOS ツールボックスモジュール

4.21 Scrap Manager
==================

Carbon Scrap Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonSnd,  Next: CarbonTE,  Prev: CarbonScrap,  Up: MacOS ツールボックスモジュール

4.22 Sound Manager
==================

Sound Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonTE,  Next: CarbonWin,  Prev: CarbonSnd,  Up: MacOS ツールボックスモジュール

4.23 TextEdit
=============

TextEditへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonWin,  Next: ColorPicker,  Prev: CarbonTE,  Up: MacOS ツールボックスモジュール

4.24 Window Manager
===================

Window Managerへのインタフェース ~


File: python-mac-jp.info,  Node: ColorPicker,  Prev: CarbonWin,  Up: MacOS ツールボックスモジュール

4.25 色選択ダイアログ
=====================

標準色選択ダイアログへのインターフェース

`ColorPicker' モジュールは標準色選択ダイアログへのアクセスを提
供します。

`GetColor(prompt, rgb)'
     標準色選択ダイアログを表示し、ユーザが色を選択することを可能にします。
     PROMPT の文字列によりユーザに指示を与えられ、デフォルトの選択 色を
     RGB で設定する事ができます。RGB は赤、緑、青の色要
     素のタプルで与えてください。`GetColor()' はユーザが選択した
     色のタプルと色が選択されたか、取り消されたかを示すフラグを返します。


File: python-mac-jp.info,  Node: 文書化されていないモジュール,  Next: 歴史とライセンス,  Prev: MacOS ツールボックスモジュール,  Up: Top

5 文書化されていないモジュール
******************************

この章のモジュールは、ほとんど (あるいはまったく) ドキュメント化されて
いません。これらのモジュールのいずれかについてドキュメントを寄与したいと
考えているなら、<docs@python.org> までご連絡ください。

* Menu:

* applesingle::
* buildtools::
* cfmfile::
* icopen::
* macerrors::
* macresource::
* Nav::
* PixMapWrapper::
* videoreader::
* W::


File: python-mac-jp.info,  Node: applesingle,  Next: buildtools,  Prev: 文書化されていないモジュール,  Up: 文書化されていないモジュール

5.1 AppleSingle デコーダー
==========================

AppleSingle フォーマットファイル用の基本的なデコーダ


File: python-mac-jp.info,  Node: buildtools,  Next: cfmfile,  Prev: applesingle,  Up: 文書化されていないモジュール

5.2 BuildAppletとその仲間のヘルパーモジュール
=============================================

BuildAppletとその仲間のヘルパーモジュール

_This is deprecated in Python 2.4.  _


File: python-mac-jp.info,  Node: cfmfile,  Next: icopen,  Prev: buildtools,  Up: 文書化されていないモジュール

5.3 コードフラグメントリソースを扱うモジュール
==============================================

コードフラグメントリソースを扱うモジュール

`cfmfile' は、コードフラグメントと関連する"cfrg"リソースを処
理するモジュールです。このモジュールでコードフラグメントを分解やマージ
できて、全てのプラグインモジュールをまとめて、一つの実行可能ファイルに
するため、BuildApplicationによって利用されます。

_This is deprecated in Python 2.4.  _


File: python-mac-jp.info,  Node: icopen,  Next: macerrors,  Prev: cfmfile,  Up: 文書化されていないモジュール

5.4 `open()'と Internet Config の置き換え
=========================================

`open()'と Internet Config の置き換え

`icopen' をインポートすると、組込み `open()' を新しいファ
イル用にファイルタイプおよびクリエーターを設定するために Internet
Configを使用するバージョンに置き換えます。


File: python-mac-jp.info,  Node: macerrors,  Next: macresource,  Prev: icopen,  Up: 文書化されていないモジュール

5.5 MacOSのエラー
=================

多くの MacOS エラーコード定数定義

`macerrors' は、MacOS エラーコードを意味する定数定義を含みます。


File: python-mac-jp.info,  Node: macresource,  Next: Nav,  Prev: macerrors,  Up: 文書化されていないモジュール

5.6 スクリプトのリソースを見つける
==================================

スクリプトのリソースを見つける

`macresource' はスクリプトが MacPython 上や MacPython アプレッ トおよび
OSX Python 上で起動されている時、特別な処理をせずにダイアログ
やメニューなどのようなリソースを見つけるためのヘルパースクリプトです。


File: python-mac-jp.info,  Node: Nav,  Next: PixMapWrapper,  Prev: macresource,  Up: 文書化されていないモジュール

5.7 NavServices の呼出し
========================

Navigation Services へのインターフェース

Navigation Servicesの低レベルインターフェース。


File: python-mac-jp.info,  Node: PixMapWrapper,  Next: videoreader,  Prev: Nav,  Up: 文書化されていないモジュール

5.8 PixMapオブジェクトのラッパー
================================

PixMapオブジェクトのラッパー

`PixMapWrapper' はPixMap オブジェクトを Python オブジェクトでラッ
プしたもので、各フィールドに対し名前でアクセスできるようになります。
`PIL' 画像との相互の変換をするメソッドも用意されています。


File: python-mac-jp.info,  Node: videoreader,  Next: W,  Prev: PixMapWrapper,  Up: 文書化されていないモジュール

5.9 QuickTime ムービーの読み込み
================================

フレームの継続処理のためのQuickTime ムービーのフレーム読み込み

`videoreader' は QuickTime ムービーを読み込み、デコードし、プロ
グラムへ渡せます。このモジュールはさらにオーディオトラックをサ
ポートしています。


File: python-mac-jp.info,  Node: W,  Prev: videoreader,  Up: 文書化されていないモジュール

5.10 `FrameWork' 上に作られたウイジェット
=========================================

`FrameWork' 上に作られた Mac 用ウイジェット

`W' ウィジェットは、`IDE' で頻繁に使われています。


File: python-mac-jp.info,  Node: 歴史とライセンス,  Next: 日本語訳について,  Prev: 文書化されていないモジュール,  Up: Top

Appendix A 歴史とライセンス
***************************

* Menu:

* Python の歴史::
* Terms and conditions for accessing or otherwise using Python::
* Licenses and Acknowledgements for Incorporated Software::


File: python-mac-jp.info,  Node: Python の歴史,  Next: Terms and conditions for accessing or otherwise using Python,  Prev: 歴史とライセンス,  Up: 歴史とライセンス

A.1 Python の歴史
=================

Python は 1990 年代の始め、オランダにある Stichting Mathematisch
Centrum (CWI, `http://www.cwi.nl/' 参照) で Guido van Rossum によって
ABC と呼ばれる言語の後継言語として生み 出されました。その後多くの人々が
Python に貢献していますが、 Guido は今日でも Python
製作者の先頭に立っています。

1995 年、 Guido は米国ヴァージニア州レストンにある Corporation for
National Reserch Initiatives (CNRI, `http://www.cnri.reston.va.us/'
参照) で Python の開発に携わり、
いくつかのバージョンをリリースしました。

2000 年 3 月、 Guido と Python のコア開発チームは BeOpen.com に 移り、
BeOpen PythonLabs チームを結成しました。同年 10 月、 PythonLabs
チームは Digital Creations (現在の Zope Corporation,
`http://www.zope.com/' 参照) に移りました。 そして 2001 年、 Python
に関する知的財産を保有するための非営利組織 Python Software Foundation
(PSF、 `http://www.python.org/psf/' 参照) を立ち上げました。このとき
Zope Corporation は PSF の賛助会員に なりました。

Python のリリースは全てオープンソース (オープンソースの定義は
`http://www.opensource.org/' を参照してください) です。
歴史的にみて、ごく一部を除くほとんどの Python リリースは GPL
互換になっています; 各リリースについては下表にまとめてあります。

リリース       ベース         年             権利           GPL 互換
------         ------         ------         ------         ------
0.9.0 thru     n/a            1991-1995      CWI            yes
1.2                                                         
1.3 thru       1.2            1995-1999      CNRI           yes
1.5.2                                                       
1.6            1.5.2          2000           CNRI           no
2.0            1.6            2000           BeOpen.com     no
1.6.1          1.6            2001           CNRI           no
2.1            2.0+1.6.1      2001           PSF            no
2.0.1          2.0+1.6.1      2001           PSF            yes
2.1.1          2.1+2.0.1      2001           PSF            yes
2.2            2.1.1          2001           PSF            yes
2.1.2          2.1.1          2002           PSF            yes
2.1.3          2.1.2          2002           PSF            yes
2.2.1          2.2            2002           PSF            yes
2.2.2          2.2.1          2002           PSF            yes
2.2.3          2.2.2          2002-2003      PSF            yes
2.3            2.2.2          2002-2003      PSF            yes
2.3.1          2.3            2002-2003      PSF            yes
2.3.2          2.3.1          2003           PSF            yes
2.3.3          2.3.2          2003           PSF            yes
2.3.4          2.3.3          2004           PSF            yes
2.3.5          2.3.4          2005           PSF            yes
2.4            2.3            2004           PSF            yes
2.4.1          2.4            2005           PSF            yes
2.4.2          2.4.1          2005           PSF            yes
2.4.3          2.4.2          2006           PSF            yes
2.5            2.4            2006           PSF            yes

_Note:_ 「GPL 互換」という表現は、Python が GPL で配布されていると
いう意味ではありません。Python のライセンスは全て、 GPL と違い、
変更したバージョンを配布する際に変更をオープンソースにしなくても
かまいません。 GPL 互換のライセンスの下では、GPL でリリースされて
いる他のソフトウェアと Python を組み合わせられますが、それ以外の
ライセンスではそうではありません。

Guido の指示の下、これらのリリースを可能にしてくださった多くの
ボランティアのみなさんに感謝します。


File: python-mac-jp.info,  Node: Terms and conditions for accessing or otherwise using Python,  Next: Licenses and Acknowledgements for Incorporated Software,  Prev: Python の歴史,  Up: 歴史とライセンス

A.2 Terms and conditions for accessing or otherwise using Python
================================================================

                *PSF LICENSE AGREEMENT FOR PYTHON 2.5*

  1. This LICENSE AGREEMENT is between the Python Software Foundation
     ("PSF"), and the Individual or Organization ("Licensee") accessing
     and otherwise using Python 2.5 software in source or binary form
     and its associated documentation.

  2. Subject to the terms and conditions of this License Agreement, PSF
     hereby grants Licensee a nonexclusive, royalty-free, world-wide
     license to reproduce, analyze, test, perform and/or display
     publicly, prepare derivative works, distribute, and otherwise use
     Python 2.5 alone or in any derivative version, provided, however,
     that PSF's License Agreement and PSF's notice of copyright, i.e.,
     "Copyright (C) 2001-2006 Python Software Foundation; All Rights
     Reserved" are retained in Python 2.5 alone or in any derivative
     version prepared by Licensee.

  3. In the event Licensee prepares a derivative work that is based on
     or incorporates Python 2.5 or any part thereof, and wants to make
     the derivative work available to others as provided herein, then
     Licensee hereby agrees to include in any such work a brief summary
     of the changes made to Python 2.5.

  4. PSF is making Python 2.5 available to Licensee on an "AS IS"
     basis.  PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
     IMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND
     DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR
     FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 2.5
     WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

  5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
     2.5 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS
     AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON
     2.5, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY
     THEREOF.

  6. This License Agreement will automatically terminate upon a material
     breach of its terms and conditions.

  7. Nothing in this License Agreement shall be deemed to create any
     relationship of agency, partnership, or joint venture between PSF
     and Licensee.  This License Agreement does not grant permission to
     use PSF trademarks or trade name in a trademark sense to endorse
     or promote products or services of Licensee, or any third party.

  8. By copying, installing or otherwise using Python 2.5, Licensee
     agrees to be bound by the terms and conditions of this License
     Agreement.

             *BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0*

        *BEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1*

  1. This LICENSE AGREEMENT is between BeOpen.com ("BeOpen"), having an
     office at 160 Saratoga Avenue, Santa Clara, CA 95051, and the
     Individual or Organization ("Licensee") accessing and otherwise
     using this software in source or binary form and its associated
     documentation ("the Software").

  2. Subject to the terms and conditions of this BeOpen Python License
     Agreement, BeOpen hereby grants Licensee a non-exclusive,
     royalty-free, world-wide license to reproduce, analyze, test,
     perform and/or display publicly, prepare derivative works,
     distribute, and otherwise use the Software alone or in any
     derivative version, provided, however, that the BeOpen Python
     License is retained in the Software, alone or in any derivative
     version prepared by Licensee.

  3. BeOpen is making the Software available to Licensee on an "AS IS"
     basis.  BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
     IMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO
     AND DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR
     FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE
     WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

  4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE
     SOFTWARE FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR
     LOSS AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THE SOFTWARE,
     OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY
     THEREOF.

  5. This License Agreement will automatically terminate upon a material
     breach of its terms and conditions.

  6. This License Agreement shall be governed by and interpreted in all
     respects by the law of the State of California, excluding conflict
     of law provisions.  Nothing in this License Agreement shall be
     deemed to create any relationship of agency, partnership, or joint
     venture between BeOpen and Licensee.  This License Agreement does
     not grant permission to use BeOpen trademarks or trade names in a
     trademark sense to endorse or promote products or services of
     Licensee, or any third party.  As an exception, the "BeOpen
     Python" logos available at http://www.pythonlabs.com/logos.html
     may be used according to the permissions granted on that web page.

  7. By copying, installing or otherwise using the software, Licensee
     agrees to be bound by the terms and conditions of this License
     Agreement.

               *CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1*

  1. This LICENSE AGREEMENT is between the Corporation for National
     Research Initiatives, having an office at 1895 Preston White Drive,
     Reston, VA 20191 ("CNRI"), and the Individual or Organization
     ("Licensee") accessing and otherwise using Python 1.6.1 software in
     source or binary form and its associated documentation.

  2. Subject to the terms and conditions of this License Agreement, CNRI
     hereby grants Licensee a nonexclusive, royalty-free, world-wide
     license to reproduce, analyze, test, perform and/or display
     publicly, prepare derivative works, distribute, and otherwise use
     Python 1.6.1 alone or in any derivative version, provided,
     however, that CNRI's License Agreement and CNRI's notice of
     copyright, i.e., "Copyright (C) 1995-2001 Corporation for National
     Research Initiatives; All Rights Reserved" are retained in Python
     1.6.1 alone or in any derivative version prepared by Licensee.
     Alternately, in lieu of CNRI's License Agreement, Licensee may
     substitute the following text (omitting the quotes): "Python 1.6.1
     is made available subject to the terms and conditions in CNRI's
     License Agreement.  This Agreement together with Python 1.6.1 may
     be located on the Internet using the following unique, persistent
     identifier (known as a handle): 1895.22/1013.  This Agreement may
     also be obtained from a proxy server on the Internet using the
     following URL: `http://hdl.handle.net/1895.22/1013'."

  3. In the event Licensee prepares a derivative work that is based on
     or incorporates Python 1.6.1 or any part thereof, and wants to make
     the derivative work available to others as provided herein, then
     Licensee hereby agrees to include in any such work a brief summary
     of the changes made to Python 1.6.1.

  4. CNRI is making Python 1.6.1 available to Licensee on an "AS IS"
     basis.  CNRI MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
     IMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, CNRI MAKES NO AND
     DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR
     FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 1.6.1
     WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

  5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
     1.6.1 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR
     LOSS AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING
     PYTHON 1.6.1, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE
     POSSIBILITY THEREOF.

  6. This License Agreement will automatically terminate upon a material
     breach of its terms and conditions.

  7. This License Agreement shall be governed by the federal
     intellectual property law of the United States, including without
     limitation the federal copyright law, and, to the extent such U.S.
     federal law does not apply, by the law of the Commonwealth of
     Virginia, excluding Virginia's conflict of law provisions.
     Notwithstanding the foregoing, with regard to derivative works
     based on Python 1.6.1 that incorporate non-separable material that
     was previously distributed under the GNU General Public License
     (GPL), the law of the Commonwealth of Virginia shall govern this
     License Agreement only as to issues arising under or with respect
     to Paragraphs 4, 5, and 7 of this License Agreement.  Nothing in
     this License Agreement shall be deemed to create any relationship
     of agency, partnership, or joint venture between CNRI and
     Licensee.  This License Agreement does not grant permission to use
     CNRI trademarks or trade name in a trademark sense to endorse or
     promote products or services of Licensee, or any third party.

  8. By clicking on the "ACCEPT" button where indicated, or by copying,
     installing or otherwise using Python 1.6.1, Licensee agrees to be
     bound by the terms and conditions of this License Agreement.

                                ACCEPT

         *CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2*

Copyright (C) 1991 - 1995, Stichting Mathematisch Centrum Amsterdam,
The Netherlands.  All rights reserved.

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Stichting Mathematisch
Centrum or CWI not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior permission.

STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR
ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


File: python-mac-jp.info,  Node: Licenses and Acknowledgements for Incorporated Software,  Prev: Terms and conditions for accessing or otherwise using Python,  Up: 歴史とライセンス

A.3 Licenses and Acknowledgements for Incorporated Software
===========================================================

This section is an incomplete, but growing list of licenses and
acknowledgements for third-party software incorporated in the Python
distribution.

* Menu:

* Mersenne Twister::
* Sockets::
* Floating point exception control::
* MD5 message digest algorithm::
* Asynchronous socket services::
* Cookie management::
* Profiling::
* Execution tracing::
* UUencode and UUdecode functions::
* XML Remote Procedure Calls::


File: python-mac-jp.info,  Node: Mersenne Twister,  Next: Sockets,  Prev: Licenses and Acknowledgements for Incorporated Software,  Up: Licenses and Acknowledgements for Incorporated Software

A.3.1 Mersenne Twister
----------------------

The `_random' module includes code based on a download from
`http://www.math.keio.ac.jp/~matumoto/MT2002/emt19937ar.html'.  The
following are the verbatim comments from the original code:

     A C-program for MT19937, with initialization improved 2002/1/26.
     Coded by Takuji Nishimura and Makoto Matsumoto.

     Before using, initialize the state by using init_genrand(seed)
     or init_by_array(init_key, key_length).

     Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
     All rights reserved.

     Redistribution and use in source and binary forms, with or without
     modification, are permitted provided that the following conditions
     are met:

      1. Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.

      2. Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in the
         documentation and/or other materials provided with the distribution.

      3. The names of its contributors may not be used to endorse or promote
         products derived from this software without specific prior written
         permission.

     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
     CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
     EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
     PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

     Any feedback is very welcome.
     http://www.math.keio.ac.jp/matumoto/emt.html
     email: matumoto@math.keio.ac.jp


File: python-mac-jp.info,  Node: Sockets,  Next: Floating point exception control,  Prev: Mersenne Twister,  Up: Licenses and Acknowledgements for Incorporated Software

A.3.2 Sockets
-------------

The `socket' module uses the functions, `getaddrinfo', and
`getnameinfo', which are coded in separate source files from the WIDE
Project, `http://www.wide.ad.jp/about/index.html'.

     Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.
     All rights reserved.

     Redistribution and use in source and binary forms, with or without
     modification, are permitted provided that the following conditions
     are met:
     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
     3. Neither the name of the project nor the names of its contributors
        may be used to endorse or promote products derived from this software
        without specific prior written permission.

     THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
     GAI_ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
     FOR GAI_ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     HOWEVER CAUSED AND ON GAI_ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
     LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN GAI_ANY WAY
     OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
     SUCH DAMAGE.


File: python-mac-jp.info,  Node: Floating point exception control,  Next: MD5 message digest algorithm,  Prev: Sockets,  Up: Licenses and Acknowledgements for Incorporated Software

A.3.3 Floating point exception control
--------------------------------------

The source for the `fpectl' module includes the following notice:

          ---------------------------------------------------------------------
         /                       Copyright (c) 1996.                           \
        |          The Regents of the University of California.                 |
        |                        All rights reserved.                           |
        |                                                                       |
        |   Permission to use, copy, modify, and distribute this software for   |
        |   any purpose without fee is hereby granted, provided that this en-   |
        |   tire notice is included in all copies of any software which is or   |
        |   includes  a  copy  or  modification  of  this software and in all   |
        |   copies of the supporting documentation for such software.           |
        |                                                                       |
        |   This  work was produced at the University of California, Lawrence   |
        |   Livermore National Laboratory under  contract  no.  W-7405-ENG-48   |
        |   between  the  U.S.  Department  of  Energy and The Regents of the   |
        |   University of California for the operation of UC LLNL.              |
        |                                                                       |
        |                              DISCLAIMER                               |
        |                                                                       |
        |   This  software was prepared as an account of work sponsored by an   |
        |   agency of the United States Government. Neither the United States   |
        |   Government  nor the University of California nor any of their em-   |
        |   ployees, makes any warranty, express or implied, or  assumes  any   |
        |   liability  or  responsibility  for the accuracy, completeness, or   |
        |   usefulness of any information,  apparatus,  product,  or  process   |
        |   disclosed,   or  represents  that  its  use  would  not  infringe   |
        |   privately-owned rights. Reference herein to any specific  commer-   |
        |   cial  products,  process,  or  service  by trade name, trademark,   |
        |   manufacturer, or otherwise, does not  necessarily  constitute  or   |
        |   imply  its endorsement, recommendation, or favoring by the United   |
        |   States Government or the University of California. The views  and   |
        |   opinions  of authors expressed herein do not necessarily state or   |
        |   reflect those of the United States Government or  the  University   |
        |   of  California,  and shall not be used for advertising or product   |
         \  endorsement purposes.                                              /
          ---------------------------------------------------------------------


File: python-mac-jp.info,  Node: MD5 message digest algorithm,  Next: Asynchronous socket services,  Prev: Floating point exception control,  Up: Licenses and Acknowledgements for Incorporated Software

A.3.4 MD5 message digest algorithm
----------------------------------

The source code for the `md5' module contains the following notice:

       Copyright (C) 1999, 2002 Aladdin Enterprises.  All rights reserved.

       This software is provided 'as-is', without any express or implied
       warranty.  In no event will the authors be held liable for any damages
       arising from the use of this software.

       Permission is granted to anyone to use this software for any purpose,
       including commercial applications, and to alter it and redistribute it
       freely, subject to the following restrictions:

       1. The origin of this software must not be misrepresented; you must not
          claim that you wrote the original software. If you use this software
          in a product, an acknowledgment in the product documentation would be
          appreciated but is not required.
       2. Altered source versions must be plainly marked as such, and must not be
          misrepresented as being the original software.
       3. This notice may not be removed or altered from any source distribution.

       L. Peter Deutsch
       ghost@aladdin.com

       Independent implementation of MD5 (RFC 1321).

       This code implements the MD5 Algorithm defined in RFC 1321, whose
       text is available at
     	http://www.ietf.org/rfc/rfc1321.txt
       The code is derived from the text of the RFC, including the test suite
       (section A.5) but excluding the rest of Appendix A.  It does not include
       any code or documentation that is identified in the RFC as being
       copyrighted.

       The original and principal author of md5.h is L. Peter Deutsch
       <ghost@aladdin.com>.  Other authors are noted in the change history
       that follows (in reverse chronological order):

       2002-04-13 lpd Removed support for non-ANSI compilers; removed
     	references to Ghostscript; clarified derivation from RFC 1321;
     	now handles byte order either statically or dynamically.
       1999-11-04 lpd Edited comments slightly for automatic TOC extraction.
       1999-10-18 lpd Fixed typo in header comment (ansi2knr rather than md5);
     	added conditionalization for C++ compilation from Martin
     	Purschke <purschke@bnl.gov>.
       1999-05-03 lpd Original version.


File: python-mac-jp.info,  Node: Asynchronous socket services,  Next: Cookie management,  Prev: MD5 message digest algorithm,  Up: Licenses and Acknowledgements for Incorporated Software

A.3.5 Asynchronous socket services
----------------------------------

The `asynchat' and `asyncore' modules contain the following notice:

      Copyright 1996 by Sam Rushing

                              All Rights Reserved

      Permission to use, copy, modify, and distribute this software and
      its documentation for any purpose and without fee is hereby
      granted, provided that the above copyright notice appear in all
      copies and that both that copyright notice and this permission
      notice appear in supporting documentation, and that the name of Sam
      Rushing not be used in advertising or publicity pertaining to
      distribution of the software without specific, written prior
      permission.

      SAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
      INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN
      NO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR
      CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
      OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
      NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
      CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


File: python-mac-jp.info,  Node: Cookie management,  Next: Profiling,  Prev: Asynchronous socket services,  Up: Licenses and Acknowledgements for Incorporated Software

A.3.6 Cookie management
-----------------------

The `Cookie' module contains the following notice:

      Copyright 2000 by Timothy O'Malley <timo@alum.mit.edu>

                     All Rights Reserved

      Permission to use, copy, modify, and distribute this software
      and its documentation for any purpose and without fee is hereby
      granted, provided that the above copyright notice appear in all
      copies and that both that copyright notice and this permission
      notice appear in supporting documentation, and that the name of
      Timothy O'Malley  not be used in advertising or publicity
      pertaining to distribution of the software without specific, written
      prior permission.

      Timothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
      SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
      AND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR
      ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
      WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
      WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
      ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
      PERFORMANCE OF THIS SOFTWARE.


File: python-mac-jp.info,  Node: Profiling,  Next: Execution tracing,  Prev: Cookie management,  Up: Licenses and Acknowledgements for Incorporated Software

A.3.7 Profiling
---------------

The `profile' and `pstats' modules contain the following notice:

      Copyright 1994, by InfoSeek Corporation, all rights reserved.
      Written by James Roskind

      Permission to use, copy, modify, and distribute this Python software
      and its associated documentation for any purpose (subject to the
      restriction in the following sentence) without fee is hereby granted,
      provided that the above copyright notice appears in all copies, and
      that both that copyright notice and this permission notice appear in
      supporting documentation, and that the name of InfoSeek not be used in
      advertising or publicity pertaining to distribution of the software
      without specific, written prior permission.  This permission is
      explicitly restricted to the copying and modification of the software
      to remain in Python, compiled Python, or other languages (such as C)
      wherein the modified or derived code is exclusively imported into a
      Python module.

      INFOSEEK CORPORATION DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
      SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
      FITNESS. IN NO EVENT SHALL INFOSEEK CORPORATION BE LIABLE FOR ANY
      SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
      RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
      CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
      CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


File: python-mac-jp.info,  Node: Execution tracing,  Next: UUencode and UUdecode functions,  Prev: Profiling,  Up: Licenses and Acknowledgements for Incorporated Software

A.3.8 Execution tracing
-----------------------

The `trace' module contains the following notice:

      portions copyright 2001, Autonomous Zones Industries, Inc., all rights...
      err...  reserved and offered to the public under the terms of the
      Python 2.2 license.
      Author: Zooko O'Whielacronx
      http://zooko.com/
      mailto:zooko@zooko.com

      Copyright 2000, Mojam Media, Inc., all rights reserved.
      Author: Skip Montanaro

      Copyright 1999, Bioreason, Inc., all rights reserved.
      Author: Andrew Dalke

      Copyright 1995-1997, Automatrix, Inc., all rights reserved.
      Author: Skip Montanaro

      Copyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.

      Permission to use, copy, modify, and distribute this Python software and
      its associated documentation for any purpose without fee is hereby
      granted, provided that the above copyright notice appears in all copies,
      and that both that copyright notice and this permission notice appear in
      supporting documentation, and that the name of neither Automatrix,
      Bioreason or Mojam Media be used in advertising or publicity pertaining to
      distribution of the software without specific, written prior permission.


File: python-mac-jp.info,  Node: UUencode and UUdecode functions,  Next: XML Remote Procedure Calls,  Prev: Execution tracing,  Up: Licenses and Acknowledgements for Incorporated Software

A.3.9 UUencode and UUdecode functions
-------------------------------------

The `uu' module contains the following notice:

      Copyright 1994 by Lance Ellinghouse
      Cathedral City, California Republic, United States of America.
                             All Rights Reserved
      Permission to use, copy, modify, and distribute this software and its
      documentation for any purpose and without fee is hereby granted,
      provided that the above copyright notice appear in all copies and that
      both that copyright notice and this permission notice appear in
      supporting documentation, and that the name of Lance Ellinghouse
      not be used in advertising or publicity pertaining to distribution
      of the software without specific, written prior permission.
      LANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO
      THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
      FITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE
      FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
      WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
      ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
      OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

      Modified by Jack Jansen, CWI, July 1995:
      - Use binascii module to do the actual line-by-line conversion
        between ascii and binary. This results in a 1000-fold speedup. The C
        version is still 5 times faster, though.
      - Arguments more compliant with python standard


File: python-mac-jp.info,  Node: XML Remote Procedure Calls,  Prev: UUencode and UUdecode functions,  Up: Licenses and Acknowledgements for Incorporated Software

A.3.10 XML Remote Procedure Calls
---------------------------------

The `xmlrpclib' module contains the following notice:

          The XML-RPC client interface is

      Copyright (c) 1999-2002 by Secret Labs AB
      Copyright (c) 1999-2002 by Fredrik Lundh

      By obtaining, using, and/or copying this software and/or its
      associated documentation, you agree that you have read, understood,
      and will comply with the following terms and conditions:

      Permission to use, copy, modify, and distribute this software and
      its associated documentation for any purpose and without fee is
      hereby granted, provided that the above copyright notice appears in
      all copies, and that both that copyright notice and this permission
      notice appear in supporting documentation, and that the name of
      Secret Labs AB or the author not be used in advertising or publicity
      pertaining to distribution of the software without specific, written
      prior permission.

      SECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
      TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-
      ABILITY AND FITNESS.  IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR
      BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY
      DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
      WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
      ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
      OF THIS SOFTWARE.


File: python-mac-jp.info,  Node: 日本語訳について,  Next: Module Index,  Prev: 歴史とライセンス,  Up: Top

Appendix B 日本語訳について
***************************

* Menu:

* このドキュメントについて::
* 翻訳者一覧 敬称略::


File: python-mac-jp.info,  Node: このドキュメントについて,  Next: 翻訳者一覧 敬称略,  Prev: 日本語訳について,  Up: 日本語訳について

B.1 このドキュメントについて
============================

この文書は、Pythonドキュメント翻訳プロジェクトによる Macintosh Library
Modules Release の日本語訳版です。日本語訳に対する質問や提案などが
ありましたら、Pythonドキュメント翻訳プロジェクトのメーリングリスト

`http://www.python.jp/mailman/listinfo/python-doc-jp'

または、プロジェクトのバグ管理ページ

`http://sourceforge.jp/tracker/?atid=116&group_id=11&func=browse'

までご報告ください。


File: python-mac-jp.info,  Node: 翻訳者一覧 敬称略,  Prev: このドキュメントについて,  Up: 日本語訳について

B.2 翻訳者一覧 (敬称略)
=======================

osawa <osawa at sm.rim.or.jp> (2.0)\ sakito <sakito at s2.xrea.com>
(2.3)\ Hiroyuki Yoshimura <DQB00103 at nifty.ne.jp> (2.3, 2.4)\ Yasushi
Masuda <y.masuda at acm.org> (2.3.3)\ TAKAGI Masahiro (2.5)\


File: python-mac-jp.info,  Node: Module Index,  Next: Class-Exception-Object Index,  Prev: 日本語訳について,  Up: Top

Module Index
************

 [index ]
* Menu:

* FrameWork:                             MiniAEFrame.          (line 12)
* icglue:                                ic.                   (line 11)
* macerrors:                             MacOS.                (line 36)


File: python-mac-jp.info,  Node: Class-Exception-Object Index,  Next: Function-Method-Variable Index,  Prev: Module Index,  Up: Top

Class, Exception, and Object Index
**********************************

 [index ]
* Menu:

* AEServer:                              MiniAEFrame.         (line  18)
* AEText:                                aetypes.             (line  59)
* AutoGILError:                          autoGIL.             (line  13)
* Boolean:                               aetypes.             (line  52)
* Comparison:                            aetypes.             (line  96)
* ComponentItem:                         aetypes.             (line 103)
* Enum:                                  aetypes.             (line  45)
* Error:                                 MacOS.               (line  31)
* error:                                 ic.                  (line  25)
* IC:                                    ic.                  (line  30)
* InsertionLoc:                          aetypes.             (line  49)
* IntlText:                              aetypes.             (line  63)
* IntlWritingCode:                       aetypes.             (line  67)
* Keyword:                               aetypes.             (line  83)
* Logical:                               aetypes.             (line  93)
* MiniApplication:                       MiniAEFrame.         (line  25)
* NProperty:                             aetypes.             (line 111)
* ObjectSpecifier:                       aetypes.             (line 117)
* Ordinal:                               aetypes.             (line  89)
* QDPoint:                               aetypes.             (line  70)
* QDRectangle:                           aetypes.             (line  73)
* Range:                                 aetypes.             (line  86)
* RGBColor:                              aetypes.             (line  76)
* StyledText:                            aetypes.             (line  55)
* TalkTo:                                aetools.             (line  54)
* Type:                                  aetypes.             (line  79)
* Unknown:                               aetypes.             (line  39)


File: python-mac-jp.info,  Node: Function-Method-Variable Index,  Next: Miscellaneous Index,  Prev: Class-Exception-Object Index,  Up: Top

Function, Method, and Variable Index
************************************

 [index ]
* Menu:

* _quit:                                 アプリケーションオブジェクト.
                                                              (line  64)
* _start:                                aetools.             (line  63)
* Application:                           FrameWork.           (line  35)
* as_pathname:                           FSSpec オブジェクト. (line  11)
* as_tuple:                              FSSpec オブジェクト. (line  14)
* AskFileForOpen:                        EasyDialogs.         (line  96)
* AskFileForSave:                        EasyDialogs.         (line 114)
* AskFolder:                             EasyDialogs.         (line 121)
* AskPassword:                           EasyDialogs.         (line  35)
* AskString:                             EasyDialogs.         (line  26)
* AskYesNoCancel:                        EasyDialogs.         (line  40)
* asyncevents:                           アプリケーションオブジェクト.
                                                              (line  49)
* BUFSIZ:                                macostools.          (line  42)
* callback:                              AEServer オブジェクト.
                                                              (line  13)
* close:                                 ウィンドウオブジェクト.
                                                              (line  14)
* copy <1>:                              findertools.         (line  27)
* copy:                                  macostools.          (line  18)
* copytree:                              macostools.          (line  28)
* Creator:                               FInfo オブジェクト.  (line   9)
* curval:                                プログレスバーオブジェクト.
                                                              (line  26)
* data <1>:                              エイリアスオブジェクト.
                                                              (line   7)
* data:                                  FSSpec オブジェクト. (line   7)
* DebugStr:                              MacOS.               (line  42)
* DialogWindow:                          FrameWork.           (line  78)
* do_activate <1>:                       スクロールウィンドウオブジェクト.
                                                              (line  36)
* do_activate:                           ウィンドウオブジェクト.
                                                              (line  31)
* do_char:                               アプリケーションオブジェクト.
                                                              (line  68)
* do_contentclick:                       ウィンドウオブジェクト.
                                                              (line  23)
* do_controlhit <1>:                     スクロールウィンドウオブジェクト.
                                                              (line  45)
* do_controlhit:                         コントロールウィンドウオブジェクト.
                                                              (line  10)
* do_dialogevent:                        アプリケーションオブジェクト.
                                                              (line  74)
* do_itemhit:                            ダイアログウィンドウオブジェクト.
                                                              (line  14)
* do_postresize <1>:                     スクロールウィンドウオブジェクト.
                                                              (line  41)
* do_postresize:                         ウィンドウオブジェクト.
                                                              (line  19)
* do_update:                             ウィンドウオブジェクト.
                                                              (line  27)
* enumsubst:                             aetools.             (line  45)
* FindApplication:                       macfs.               (line 113)
* FindFolder:                            macfs.               (line  97)
* FInfo:                                 macfs.               (line  48)
* Flags:                                 FInfo オブジェクト.  (line  15)
* Fldr:                                  FInfo オブジェクト.  (line  23)
* FSSpec:                                macfs.               (line  35)
* getabouttext:                          アプリケーションオブジェクト.
                                                              (line  14)
* GetArgv:                               EasyDialogs.         (line  58)
* GetColor:                              ColorPicker.         (line  12)
* GetCreatorAndType:                     MacOS.               (line  55)
* GetCreatorType:                        FSSpec オブジェクト. (line  26)
* GetDates:                              FSSpec オブジェクト. (line  39)
* GetDirectory:                          macfs.               (line  78)
* GetErrorString:                        MacOS.               (line  39)
* GetFInfo:                              FSSpec オブジェクト. (line  32)
* GetInfo:                               エイリアスオブジェクト.
                                                              (line  19)
* getscrollbarvalues:                    スクロールウィンドウオブジェクト.
                                                              (line  15)
* GetTicks:                              MacOS.               (line  52)
* idle:                                  アプリケーションオブジェクト.
                                                              (line  81)
* inc:                                   プログレスバーオブジェクト.
                                                              (line  53)
* installaehandler:                      AEServer オブジェクト.
                                                              (line   7)
* installAutoGIL:                        autoGIL.             (line  17)
* is_scriptable:                         gensuitemodule.      (line  22)
* keysubst:                              aetools.             (line  39)
* label:                                 プログレスバーオブジェクト.
                                                              (line  41)
* launch:                                findertools.         (line  17)
* launchurl <1>:                         IC オブジェクト.     (line  23)
* launchurl:                             ic.                  (line  38)
* linkmodel:                             MacOS.               (line  21)
* Location:                              FInfo オブジェクト.  (line  19)
* mainloop:                              アプリケーションオブジェクト.
                                                              (line  19)
* makeusermenus:                         アプリケーションオブジェクト.
                                                              (line  10)
* mapfile <1>:                           IC オブジェクト.     (line  39)
* mapfile:                               ic.                  (line  42)
* maptypecreator <1>:                    IC オブジェクト.     (line  58)
* maptypecreator:                        ic.                  (line  44)
* maxval:                                プログレスバーオブジェクト.
                                                              (line  31)
* Menu:                                  FrameWork.           (line  45)
* MenuBar:                               FrameWork.           (line  41)
* MenuItem:                              FrameWork.           (line  50)
* Message:                               EasyDialogs.         (line  19)
* mkalias:                               macostools.          (line  33)
* move:                                  findertools.         (line  32)
* NewAlias:                              FSSpec オブジェクト. (line  18)
* NewAliasMinimal:                       FSSpec オブジェクト. (line  23)
* NewAliasMinimalFromFullPath:           macfs.               (line 108)
* open <1>:                              ダイアログウィンドウオブジェクト.
                                                              (line  10)
* open:                                  ウィンドウオブジェクト.
                                                              (line   9)
* openrf:                                MacOS.               (line  65)
* pack:                                  aepack.              (line  17)
* packevent:                             aetools.             (line  27)
* parseurl <1>:                          IC オブジェクト.     (line  29)
* parseurl:                              ic.                  (line  40)
* Print:                                 findertools.         (line  22)
* processfile:                           gensuitemodule.      (line  28)
* processfile_fromresource:              gensuitemodule.      (line  56)
* ProgressBar:                           EasyDialogs.         (line  50)
* PromptGetFile:                         macfs.               (line  67)
* RawAlias:                              macfs.               (line  43)
* RawFSSpec:                             macfs.               (line  38)
* Resolve:                               エイリアスオブジェクト.
                                                              (line  11)
* ResolveAliasFile:                      macfs.               (line  51)
* restart:                               findertools.         (line  41)
* runtimemodel:                          MacOS.               (line  16)
* scalebarvalues:                        スクロールウィンドウオブジェクト.
                                                              (line  31)
* scrollbar_callback:                    スクロールウィンドウオブジェクト.
                                                              (line  25)
* scrollbars:                            スクロールウィンドウオブジェクト.
                                                              (line  10)
* send:                                  aetools.             (line  67)
* Separator:                             FrameWork.           (line  66)
* set:                                   プログレスバーオブジェクト.
                                                              (line  45)
* setarrowcursor:                        FrameWork.           (line  91)
* SetCreatorAndType:                     MacOS.               (line  60)
* SetCreatorType:                        FSSpec オブジェクト. (line  29)
* SetDates:                              FSSpec オブジェクト. (line  43)
* SetFInfo:                              FSSpec オブジェクト. (line  35)
* SetFolder:                             macfs.               (line  86)
* settypecreator <1>:                    IC オブジェクト.     (line  66)
* settypecreator:                        ic.                  (line  46)
* setwatchcursor:                        FrameWork.           (line  88)
* shutdown:                              findertools.         (line  44)
* sleep:                                 findertools.         (line  37)
* StandardGetFile:                       macfs.               (line  60)
* StandardPutFile:                       macfs.               (line  71)
* SubMenu:                               FrameWork.           (line  69)
* SysBeep:                               MacOS.               (line  49)
* title:                                 プログレスバーオブジェクト.
                                                              (line  38)
* touched:                               macostools.          (line  36)
* Type:                                  FInfo オブジェクト.  (line  12)
* unpack:                                aepack.              (line  45)
* unpackevent:                           aetools.             (line  33)
* Update:                                エイリアスオブジェクト.
                                                              (line  22)
* updatescrollbars:                      スクロールウィンドウオブジェクト.
                                                              (line  21)
* Window:                                FrameWork.           (line  73)
* windowbounds:                          FrameWork.           (line  81)
* WMAvailable:                           MacOS.               (line  72)


File: python-mac-jp.info,  Node: Miscellaneous Index,  Prev: Function-Method-Variable Index,  Up: Top

Miscellaneous Index
*******************

 [index ]
* Menu:

* (Window method):                       ウィンドウオブジェクト.
                                                              (line   8)
* aepack:                                aepack.              (line   6)
* aetools:                               aetools.             (line   6)
* aetypes:                               aetypes.             (line   6)
* Alias Manager, Macintosh:              macfs.               (line  18)
* AppleEvents <1>:                       MiniAEFrame.         (line  11)
* AppleEvents:                           findertools.         (line   9)
* applesingle:                           applesingle.         (line   6)
* autoGIL:                               autoGIL.             (line   6)
* buildtools:                            buildtools.          (line   6)
* Carbon.AE:                             CarbonAE.            (line   6)
* Carbon.AH:                             CarbonAH.            (line   6)
* Carbon.App:                            CarbonApp.           (line   6)
* Carbon.CaronEvt:                       CarbonCarbonEvt.     (line   6)
* Carbon.CF:                             CarbonCF.            (line   6)
* Carbon.CG:                             CarbonCG.            (line   6)
* Carbon.Cm:                             CarbonCm.            (line   6)
* Carbon.Ctl:                            CarbonCtl.           (line   6)
* Carbon.Dlg:                            CarbonDlg.           (line   6)
* Carbon.Evt:                            CarbonEvt.           (line   6)
* Carbon.Fm:                             CarbonFm.            (line   6)
* Carbon.Folder:                         CarbonFolder.        (line   6)
* Carbon.Help:                           CarbonHelp.          (line   6)
* Carbon.List:                           CarbonList.          (line   6)
* Carbon.Menu:                           CarbonMenu.          (line   6)
* Carbon.Mlte:                           CarbonMlte.          (line   6)
* Carbon.Qd:                             CarbonQd.            (line   6)
* Carbon.Qdoffs:                         CarbonQdoffs.        (line   6)
* Carbon.Qt:                             CarbonQt.            (line   6)
* Carbon.Res:                            CarbonRes.           (line   6)
* Carbon.Scrap:                          CarbonScrap.         (line   6)
* Carbon.Snd:                            CarbonSnd.           (line   6)
* Carbon.TE:                             CarbonTE.            (line   6)
* Carbon.Win:                            CarbonWin.           (line   6)
* cfmfile:                               cfmfile.             (line   6)
* ColorPicker:                           ColorPicker.         (line   6)
* EasyDialogs:                           EasyDialogs.         (line   6)
* findertools:                           findertools.         (line   6)
* FrameWork:                             FrameWork.           (line   6)
* gensuitemodule:                        gensuitemodule.      (line   6)
* ic:                                    ic.                  (line   6)
* icopen:                                icopen.              (line   6)
* macerrors:                             macerrors.           (line   6)
* macfs:                                 macfs.               (line   6)
* Macintosh Alias Manager:               macfs.               (line  18)
* MacOS:                                 MacOS.               (line   6)
* macostools:                            macostools.          (line   6)
* macpath:                               macpath.             (line   6)
* macresource:                           macresource.         (line   6)
* MiniAEFrame:                           MiniAEFrame.         (line   6)
* Nav:                                   Nav.                 (line   6)
* Navigation Services:                   EasyDialogs.         (line 109)
* Open Scripting Architecture:           MiniAEFrame.         (line  10)
* PixMapWrapper:                         PixMapWrapper.       (line   6)
* Standard File:                         macfs.               (line  18)
* videoreader:                           videoreader.         (line   6)
* W:                                     W.                   (line   6)



Tag Table:
Node: Top123
Node: 序587
Node: MacintoshでPythonを利用する1838
Node: MacPythonの入手とインストール2645
Node: Python スクリプトの実行方法4812
Node: GUI つきのスクリプトの実行6556
Node: 設定7055
Node: 統合開発環境7766
Node: Python Interactiveウィンドウを使う8387
Node: Pythonスクリプトを書く8699
Node: 統合開発環境の中からスクリプトを実行する9909
Node: Save as と Save as Applet の違い10775
Node: パッケージマネージャ11763
Node: MacPython モジュール13458
Node: macpath13853
Node: macfs14552
Node: FSSpec オブジェクト19559
Node: エイリアスオブジェクト20987
Node: FInfo オブジェクト22175
Node: ic22789
Node: IC オブジェクト24430
Node: MacOS27544
Node: macostools30656
Node: findertools32527
Node: EasyDialogs34158
Node: プログレスバーオブジェクト41013
Node: FrameWork43625
Node: アプリケーションオブジェクト47694
Node: ウィンドウオブジェクト51596
Node: コントロールウィンドウオブジェクト52951
Node: スクロールウィンドウオブジェクト53484
Node: ダイアログウィンドウオブジェクト55748
Node: autoGIL56334
Node: MacPython OSA モジュール57214
Node: gensuitemodule61163
Node: aetools64305
Node: aepack67716
Node: aetypes71170
Node: MiniAEFrame75555
Node: AEServer オブジェクト77009
Node: MacOS ツールボックスモジュール78149
Node: CarbonAE79867
Node: CarbonAH80087
Node: CarbonApp80283
Node: CarbonCF80499
Node: CarbonCG80816
Node: CarbonCarbonEvt81015
Node: CarbonCm81231
Node: CarbonCtl81439
Node: CarbonDlg81635
Node: CarbonEvt81829
Node: CarbonFm82021
Node: CarbonFolder82213
Node: CarbonHelp82412
Node: CarbonList82614
Node: CarbonMenu82807
Node: CarbonMlte83000
Node: CarbonQd83227
Node: CarbonQdoffs83425
Node: CarbonQt83645
Node: CarbonRes83843
Node: CarbonScrap84080
Node: CarbonSnd84282
Node: CarbonTE84476
Node: CarbonWin84653
Node: ColorPicker84850
Node: 文書化されていないモジュール85483
Node: applesingle86027
Node: buildtools86275
Node: cfmfile86568
Node: icopen87112
Node: macerrors87516
Node: macresource87770
Node: Nav88192
Node: PixMapWrapper88451
Node: videoreader88860
Node: W89253
Node: 歴史とライセンス89528
Node: Python の歴史89863
Node: Terms and conditions for accessing or otherwise using Python93577
Node: Licenses and Acknowledgements for Incorporated Software104262
Node: Mersenne Twister104986
Node: Sockets107397
Node: Floating point exception control109408
Node: MD5 message digest algorithm112603
Node: Asynchronous socket services115130
Node: Cookie management116539
Node: Profiling117928
Node: Execution tracing119630
Node: UUencode and UUdecode functions121071
Node: XML Remote Procedure Calls122854
Node: 日本語訳について124552
Node: このドキュメントについて124779
Node: 翻訳者一覧 敬称略125361
Node: Module Index125722
Node: Class-Exception-Object Index126111
Node: Function-Method-Variable Index128310
Node: Miscellaneous Index140699

End Tag Table
