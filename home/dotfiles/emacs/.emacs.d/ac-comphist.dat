((("numpy" .
           [1 0 0 0 0])
  ("import" .
            [1 0 0 0 0 0])
  ("js3-mode" .
              [1 0 0 0 0 0 0 0])
  ("ratio" .
           [0 0 1 0 0])
  ("materials" .
               [0 0 0 0 1 0 0 0 0])
  ("candidates" .
                [0 0 0 1 0 0 0 0 0 0])
  ("usable_ships" .
                  [0 0 0 0 1 0 0 0 0 0 0 0])
  ("suffix-array2" .
                   [1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("abracadabra" .
                 [0 0 0 0 0 0 1 0 0 0 0])
  ("ab" .
        [1 0])
  ("idx" .
         [1 0 0])
  ("suffix-array3" .
                   [2 0 0 0 0 0 0 0 0 0 0 0 0])
  ("utf-8-hfs" .
               [0 0 0 0 0 0 0 0 1])
  ("{}" .
        [1 0])
  ("term-paste" .
                [1 0 0 0 0 0 0 0 0 0])
  ("goe" .
         [1 0 0])
  ("remove-ext" .
                [0 0 0 0 0 0 0 1 0 0])
  (":preview-url" .
                  [0 0 0 0 0 0 0 0 0 0 0 1])
  ("ponadra." .
              [0 0 0 0 0 0 0 1])
  ("crawl" .
           [1 0 0 0 0])
  ("add-song" .
              [1 0 0 0 0 0 0 0])
  ("extract-entry" .
                   [0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("feed" .
          [1 0 0 0])
  (":reload-all" .
                 [2 0 0 0 0 0 0 0 0 0 0])
  ("exists-song?" .
                  [0 0 0 0 0 0 0 1 0 0 0 0])
  ("init" .
          [2 0 0 0])
  ("use" .
         [3 0 0])
  ("clojure-version" .
                     [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("->" .
        [1 0])
  ("MathContext." .
                  [0 0 0 0 0 0 0 1 0 0 0 0])
  (".floatValue" .
                 [0 0 0 0 0 0 1 0 0 0 0])
  ("BigDecimal" .
                [0 0 0 0 1 0 0 1 0 0])
  ("Big" .
         [0 0 1])
  ("Math/round" .
                [1 0 0 0 0 0 0 0 0 0])
  ("seconds" .
             [1 0 0 0 0 0 0])
  ("order" .
           [1 0 0 0 0])
  ("second" .
            [0 0 0 1 0 0])
  ("Math/log10" .
                [1 0 0 0 0 0 0 0 0 0])
  ("max" .
         [2 0 0])
  ("Math/abs" .
              [0 0 0 0 0 0 0 1])
  ("downs" .
           [1 0 0 0 0])
  ("date" .
          [1 0 0 0])
  ("doto" .
          [1 0 0 0])
  ("Calendar" .
              [1 0 0 0 0 0 0 0])
  ("0" .
       [2])
  (":neg" .
          [2 0 0 0])
  (":pos" .
          [2 0 0 0])
  ("denominator" .
                 [0 0 0 0 0 0 2 0 0 0 0])
  ("n" .
       [2])
  ("Math/sqrt" .
               [0 0 0 0 0 0 0 1 0])
  ("numerator" .
               [1 0 0 0 1 0 0 0 0])
  ("persistent!" .
                 [0 0 0 1 0 0 0 0 0 0 0])
  ("normal-dist" .
                 [0 0 0 0 1 0 0 0 0 0 0])
  ("ratings" .
             [2 0 0 0 0 2 1])
  ("score" .
           [3 0 0 0 0])
  ("0.5" .
         [1 0 0])
  ("b" .
       [3])
  ("percent" .
             [2 0 0 0 2 3 3])
  ("clj-algo.search" .
                     [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0])
  ("numtest" .
             [0 0 0 0 0 1 0])
  ("float" .
           [1 0 0 0 1])
  ("hit" .
         [5 0 0])
  ("predict" .
             [0 0 0 0 0 1 0])
  ("correct" .
             [0 0 0 0 0 1 0])
  ("words" .
           [1 0 0 0 0])
  ("classify" .
              [0 0 0 0 0 0 1 0])
  ("word" .
          [1 0 0 0])
  ("reduce" .
            [3 0 0 0 0 0])
  ("test-data" .
               [0 0 0 0 0 0 0 2 0])
  ("testfile" .
              [0 0 0 0 0 0 1 0])
  ("test" .
          [2 0 0 0])
  ("read-line" .
               [0 0 0 0 0 0 0 0 1])
  ("train" .
           [1 0 0 0 0])
  ("trained" .
             [2 0 0 0 0 0 0])
  ("re-seq" .
            [1 0 0 0 0 0])
  ("trainfile" .
               [0 0 0 0 0 0 0 1 0])
  ("slurp" .
           [0 0 0 1 0])
  ("split-lines" .
                 [0 0 0 0 0 0 0 0 0 1 0])
  ("train-data" .
                [1 0 0 0 0 0 0 0 1 0])
  (":entry_id" .
               [0 0 0 0 0 0 0 1 0])
  ("play" .
          [0 0 0 2])
  (":" .
       [3])
  (":href" .
           [3 0 0 0 0])
  (":a" .
        [3 0])
  (":li" .
         [3 0 0])
  (":ul" .
         [2 0 0])
  (":class" .
            [1 0 0 1 0 0])
  ("start" .
           [2 0 0 0 0])
  ("playlists" .
               [2 0 0 0 0 0 2 0 0])
  ("list" .
          [1 0 0 0])
  ("*year*" .
            [1 0 0 0 0 0])
  ("matome-fm.util" .
                    [2 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("Returns" .
             [0 0 0 0 1 0 0])
  ("Superman" .
              [0 0 0 0 1 0 0 0])
  ("Luck" .
          [1 0 0 0])
  ("Just" .
          [0 0 0 1])
  ("Plane" .
           [0 0 0 1 0])
  ("Snakes" .
            [0 0 0 0 1 0])
  ("Water" .
           [0 0 0 0 1])
  ("the" .
         [1 0 0])
  ("Lady" .
          [1 0 0 0])
  ("2.5" .
         [1 0 0])
  ("and" .
         [1 0 0])
  ("3.5" .
         [2 0 0])
  ("3.0" .
         [2 0 1])
  ("wrap-request-logging" .
                          [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0])
  ("color-theme-tangotango" .
                            [0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0])
  ("*out-path*" .
                [0 0 0 0 0 0 1 0 0 0])
  ("*out*" .
           [0 0 0 1 0])
  ("mkdir!" .
            [0 0 1 0 0 0])
  ("unrar!" .
            [1 0 0 0 0 0])
  ("pmap" .
          [1 0 0 0])
  ("dir" .
         [7 0 0])
  ("path" .
          [14 0 0 0])
  ("*in-path*" .
               [1 0 0 0 0 0 1 0 0])
  ("print" .
           [1 0 0 0 0])
  ("hoge" .
          [3 0 0 0])
  ("101" .
         [1 0 0])
  ("map" .
         [15 0 0])
  ("m" .
       [1])
  ("conj" .
          [1 0 0 0])
  ("rest" .
          [4 0 0 0])
  ("interpose" .
               [2 0 0 0 0 0 0 0 0])
  ("prn" .
         [3 0 0])
  ("%2" .
        [3 0])
  ("str" .
         [14 0 2])
  ("clojure.string" .
                    [0 0 0 0 0 0 0 0 0 0 0 1 0 0])
  (".getBytes" .
               [1 0 0 0 0 0 0 0 0])
  ("compojure.core" .
                    [1 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("data-chunk-data" .
                     [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("println" .
             [8 0 0 0 0 0 0])
  ("bytes-to-short" .
                    [2 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("bytes" .
           [2 0 0 0 0])
  ("data-buffer" .
                 [0 0 0 0 0 0 2 0 0 0 0])
  ("fmt-samples-persec" .
                        [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("MonoPCM" .
             [0 0 0 0 0 0 1])
  ("into" .
          [1 0 0 0])
  ("int" .
         [5 0 0])
  ("dotimes" .
             [1 0 0 0 0 0 0])
  ("defmacro" .
              [0 0 0 1 0 0 0 0])
  ("definline" .
               [0 0 0 1 0 0 0 0 0])
  ("defn" .
          [30 0 1 1])
  ("defn-" .
           [0 0 0 1 1])
  ("slime-repl" .
                [0 0 0 0 0 0 0 0 0 1])
  ("local-set-key" .
                   [0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("slime" .
           [1 0 0 0 0])
  ("lambda" .
            [1 0 0 0 0 0])
  ("add-hook" .
              [0 0 0 0 0 0 0 2])
  ("anything-show-kill-ring" .
                             [0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("global-set-key" .
                    [0 0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("anything-c-source-kill-ring" .
                                 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("anything-c-source-buffers+" .
                                [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("emacs22over-p" .
                   [0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("emacs-major-version" .
                         [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("vmopt" .
           [1 0 0 0 0])
  ("coll" .
          [2 0 0 0])
  ("/Users/kaku/" .
                  [0 0 0 0 0 0 0 0 0 0 1 0])
  ("/Users/kaku/local/" .
                        [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("/Users/kaku/local/bin/" .
                            [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("let" .
         [23 0 0])
  ("filename" .
              [2 0 0 0 0 0 0 0])
  ("filepath" .
              [1 0 0 0 0 0 1 0])
  ("with-open" .
               [1 0 0 0 0 0 0 0 0])
  ("100" .
         [3 0 0])
  ("zero?" .
           [4 0 5 1 0])
  ("recur" .
           [1 0 0 0 0])
  ("cons" .
          [1 0 0 0])
  ("inc" .
         [5 0 0])
  ("dec" .
         [1 0 0])
  ("cond" .
          [6 0 0 0])
  ("mod" .
         [2 0 0])
  ("15" .
        [3 0])
  ("Fizz" .
          [3 0 0 0])
  ("for" .
         [7 0 0])
  ("range" .
           [2 0 0 0 1])
  ("1" .
       [4])
  ("println-str" .
                 [1 0 0 0 0 0 0 0 0 0 0])
  ("rem" .
         [12 0 0])
  ("fn" .
        [9 0])
  ("FizzBuzz" .
              [0 0 0 0 0 0 1 0])
  ("Buzz" .
          [1 0 0 0])
  (":else" .
           [3 0 0 0 0])
  ("condp" .
           [1 0 0 0 0])
  ("%1" .
        [3 0])
  ("comment" .
             [1 0 1 0 1 0 0])
  ("derive" .
            [0 0 1 0 0 0])
  ("doall" .
           [1 0 0 0 0])
  (".endsWith" .
               [0 0 0 1 1 0 0 0 0])
  ("filter" .
            [2 1 0 0 0 1])
  ("File." .
           [4 0 0 0 0])
  ("some" .
          [2 0 0 0])
  (".isDirectory" .
                  [0 0 0 0 0 1 0 0 0 0 0 0])
  ("flatten" .
             [1 0 0 0 0 0 0])
  ("exists-subdir?" .
                    [0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("doseq" .
           [3 0 2 0 0])
  (".renameTo" .
               [3 0 0 0 0 0 0 0 0])
  (".getName" .
              [3 0 0 0 0 0 0 0])
  ("flatten-dir" .
                 [0 0 0 0 0 0 0 0 1 0 0])
  ("outdir" .
            [1 0 0 0 0 0])
  ("*archive-path*" .
                    [0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("parallel-rearchive" .
                        [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0])
  ("*in*" .
          [0 0 0 1])
  ("agent" .
           [3 0 0 0 0])
  ("send" .
          [1 0 0 0])
  ("apply" .
           [1 0 1 0 2])
  ("await" .
           [1 0 0 0 0])
  ("rearchive" .
               [1 0 0 0 0 0 0 0 0])
  ("main-routes" .
                 [0 0 0 0 0 1 0 0 0 0 0])
  ("all-ns" .
            [0 0 0 1 0 0])
  ("all-articles" .
                  [0 0 0 0 0 0 0 1 0 0 0 0])
  (".delete" .
             [1 0 0 0 0 0 0])
  ("*ds*" .
          [1 0 0 0])
  (".getKey" .
             [2 0 0 0 0 0 0])
  ("into-array" .
                [0 0 0 0 0 0 1 0 0 0])
  ("keys" .
          [2 0 0 0])
  ("Key" .
         [1 0 0])
  ("package" .
             [0 0 0 0 1 0 0])
  ("num" .
         [8 0 0])
  ("id" .
        [9 0])
  ("playlist" .
              [1 0 0 0 0 0 0 0])
  (":div" .
          [2 0 0 0])
  (":id" .
         [2 0 0])
  ("var" .
         [5 0 0])
  ("ids" .
         [1 0 0])
  ("i" .
       [2])
  ("each" .
          [1 0 0 0])
  ("function" .
              [2 0 0 0 0 0 0 0])
  ("console" .
             [2 0 0 0 0 1 0])
  ("log" .
         [3 0 0])
  ("elem" .
          [4 0 0 0])
  ("class" .
           [1 0 0 0 0])
  ("if" .
        [7 0])
  ("html" .
          [6 0 0 0])
  ("return" .
            [1 0 0 0 0 0])
  ("this" .
          [2 0 0 0])
  ("nextId" .
            [0 0 0 0 0 1])
  ("onPlayerStateChange" .
                         [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("statusCode" .
                [0 0 0 0 1 0 0 0 0 0])
  ("nextPlay" .
              [0 0 0 0 0 0 1 0])
  ("fetch" .
           [2 0 0 0 0])
  ("url" .
         [13 0 0])
  ("clojure.xml" .
                 [1 0 0 0 0 0 0 0 0 0 0])
  ("x/parse" .
             [1 0 0 0 0 0 0])
  ("content" .
             [5 0 0 0 0 0 0])
  (":import" .
             [2 0 0 0 0 0 0])
  ("record" .
            [3 0 0 0 1 1])
  ("add!" .
          [1 0 0 0])
  (":enc" .
          [0 0 0 1])
  (":entries" .
              [2 0 0 0 0 0 0 0])
  ("key" .
         [5 0 0])
  ("val" .
         [2 0 0])
  ("name" .
          [3 0 0 0])
  ("value" .
           [4 0 0 0 0])
  (":_id" .
          [2 0 0 0])
  (":youtube_ids" .
                  [0 0 0 0 1 0 0 0 0 0 0 0])
  ("entry" .
           [1 0 0 1 0])
  ("db/get-one-by" .
                   [0 0 0 0 0 0 0 0 0 0 1 0 0])
  ("nil?" .
          [1 0 0 1])
  ("not" .
         [5 0 0])
  ("empty" .
           [0 0 1 0 0])
  ("empty?" .
            [1 0 0 0 0 0])
  ("already-added?" .
                    [0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  (":videos" .
             [2 0 0 0 0 0 0])
  (":vid" .
          [3 0 0 0])
  ("if-not" .
            [1 0 1 0 1 1])
  ("logic" .
           [1 0 0 0 0])
  (":title" .
            [5 0 0 0 0 0])
  ("register" .
              [1 0 0 0 0 0 0 0])
  (":url" .
          [2 0 0 0])
  ("count" .
           [6 0 0 0 0])
  ("vids" .
          [1 0 0 0])
  ("first" .
           [6 0 0 0 0])
  (":description" .
                  [0 0 0 0 0 1 0 0 0 0 0 0])
  ("xmlseq" .
            [1 0 0 0 0 0])
  ("tagkey" .
            [1 0 0 0 0 0])
  ("c" .
       [2])
  ("contents" .
              [3 0 0 0 0 0 0 0])
  ("assoc" .
           [1 0 0 0 0])
  ("logic/video-data" .
                      [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("or" .
        [2 0])
  ("route/resources" .
                     [0 0 0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("re-matches" .
                [1 0 0 0 0 0 0 0 0 0])
  ("re-find" .
             [2 0 0 0 0 0 0])
  ("euc-jp?" .
             [0 0 0 1 1 0 0])
  ("clj-algo.naivebayes" .
                         [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("primitives-classnames" .
                           [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("struct-map" .
                [0 0 0 1 0 0 0 0 0 0])
  ("mawl" .
          [0 0 0 1])
  (":use" .
          [1 0 0 0])
  (":only" .
           [1 0 0 1 0])
  (":require" .
              [1 0 0 0 0 0 0 0])
  ("def" .
         [2 0 0])
  ("-" .
       [1])
  ("gen-api-url" .
                 [0 0 0 0 0 0 1 1 0 1 0])
  ("api-url-base" .
                  [0 0 0 0 1 0 0 0 0 0 0 0])
  ("uid" .
         [4 0 0])
  ("app" .
         [1 0 0])
  ("appid" .
           [2 0 0 0 0])
  ("read-string" .
                 [0 0 0 0 0 0 0 1 0 0 0])
  ("page" .
          [4 0 0 0])
  ("per" .
         [5 0 0])
  ("div" .
         [2 0 0])
  ("total" .
           [6 0 0 0 0])
  ("q" .
       [1])
  ("xml-zip" .
             [1 0 0 0 0 0 0])
  ("%" .
       [3])
  ("zip-webapi" .
                [0 0 0 0 2 0 0 0 0 0])
  ("init-url" .
              [0 0 0 0 0 0 0 1])
  ("init-zipped" .
                 [0 0 0 0 0 0 0 1 0 0 0])
  ("total-available" .
                     [0 0 0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("zipped" .
            [2 0 0 0 0 0])
  ("parse-num" .
               [0 0 0 0 0 0 0 0 1])
  ("total-page-num" .
                    [0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("concat" .
            [2 0 0 0 0 0])
  ("norm-ratings" .
                  [0 0 0 0 0 0 0 0 0 0 0 1])
  ("urls" .
          [1 0 0 0])
  ("vals" .
          [2 0 0 0])
  (">" .
       [1])
  ("comp" .
          [1 0 0 0])
  ("rating-summary" .
                    [0 0 0 0 0 0 0 2 0 2 0 1 0 0])
  ("a" .
       [1])
  ("nums" .
          [2 0 0 0])
  ("bar-len" .
             [2 0 0 0 0 0 0])
  ("Math/ceil" .
               [0 0 0 0 0 0 1 0 0])
  ("format" .
            [1 0 0 0 0 0])
  ("rate" .
          [1 0 0 0])
  ("space" .
           [1 0 0 0 0])
  ("len" .
         [1 0 0])
  ("-main" .
           [1 0 0 0 0])
  ("args" .
          [2 0 0 0])
  ("System/err" .
                [0 0 0 0 0 0 0 0 0 1])
  ("-1" .
        [1 0])
  ("comp-rate" .
               [0 0 0 0 0 1 0 0 0])
  ("uniq-c" .
            [1 0 0 0 0 0])
  (":ratings" .
              [1 0 0 0 0 0 0 0])
  ("reviews" .
             [1 0 0 0 0 0 0])
  ("output-result" .
                   [0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("rating" .
            [1 0 0 0 0 0])
  ("clojure" .
             [0 0 0 0 0 0 1])
  ("require" .
             [3 0 0 0 0 0 0])
  ("nrepl" .
           [0 0 0 0 1])
  ("tango-2-theme" .
                   [1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("utf-8-unix" .
                [1 0 0 0 0 0 0 1 0 0])
  ("setenv" .
            [1 0 0 0 0 0])
  ("clojure-mode" .
                  [1 0 0 0 0 0 0 0 0 0 0 0])))
